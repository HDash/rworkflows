save_dir=tempdir()
file.copy(from = system.file("templates","Dockerfile",
package = "rworkflows"),
to = path,
overwrite = TRUE)
path
readLines(path)
txt <- readLines(path)
construct_cont()
construct_cont()[[1]]
base_image=construct_cont()[[1]]
base_image
gsub("^FROM*",paste0("FROM",base_image),txt)
gsub("^FROM*",paste("FROM",base_image),txt)
gsub("^FROM {BASE_IMAGE}",paste("FROM",base_image),txt)
gsub("^FROM \\{BASE_IMAGE\\}",paste("FROM",base_image),txt)
writeLines(txt,path)
library(rworkflows)
devtools::check_man()
library(rworkflows)
path <- use_dockerfile(save_dir=tempdir())
path <- use_dockerfile(save_dir=tempdir(), preview=TRUE)
#' (default: \code{FALSE}).
#' @param show Print the contents of the Docker file in the R console.
#' @param verbose Print messages.
#' @returns Path to Docker file.
#'
#' @export
#' @importFrom utils download.file
#' @importFrom here here
#' @examples
#' path <- use_dockerfile(save_dir=tempdir(), preview=TRUE)
use_dockerfile <- function(save_dir=here::here(),
path=file.path(save_dir,"Dockerfile"),
base_image=construct_cont()[[1]],
force_new=FALSE,
show=FALSE,
verbose=TRUE){
# devoptera::args2vars(use_dockerfile)
if(file.exists(path) &&
isFALSE(force_new)){
messager("Using existing Docker file:",path,v=verbose)
} else {
messager("Creating new Docker file ==>",path,v=verbose)
dir.create(dirname(path), showWarnings = FALSE, recursive = TRUE)
file.copy(from = system.file("templates","Dockerfile",
package = "rworkflows"),
to = path,
overwrite = TRUE)
txt <- readLines(path)
txt <- gsub("^FROM \\{BASE_IMAGE\\}",paste("FROM",base_image),txt)
writeLines(txt,path)
}
if(isTRUE(show)){
messager("Docker file preview:",v=verbose)
cat(paste(readLines(path),collapse ="\n"))
}
return(path)
}
path <- use_dockerfile(save_dir=tempdir(), preview=TRUE)
path <- use_dockerfile(save_dir=tempdir(), show=TRUE)
library(rworkflows)
path <- use_dockerfile(save_dir=tempdir(), show=TRUE)
library(rworkflows)
chattr::chattr_app()
install.packages("chattr")
chattr::chattr_app()
remotes::install_github("mlverse/chattr")
chattr::chattr_app()
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
height="100%",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
height="100%",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
height="100%",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
install.packages("githubinstall")
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
height="100%",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
height="100%",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
check_gh_url <- function(URL){
if(sum(grepl("https://github.com",URL))==0) {
return(NULL)
} else {
return(URL)
}
}
devtools::check_man()
library(rworkflows)
get_github_url_desc(desc_file = NULL)
library(rworkflows)
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
height="100%",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
echodeps::visnet_save(res$save_path)
library(rworkflows)
method_seed = "github",
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
#node_size = "total_downloads",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
echodeps::visnet_save(res$save_path)
saveRDS(res, here::here("reports","dep_graph_res.rds"))
res$report
res$pkg
res$graph
data.frame(res$graph)
names(data.frame(res$graph))
unique(names(data.frame(res$graph)))
sort(names(data.frame(res$graph)))
echodeps:::report_summary
res$report
r_repos_res <- echogithub::r_repos(
which = echogithub::r_repos_opts(exclude="local"),
save_path = here::here("reports","r_repos_upset.pdf"),
width = 9)
r_repos_res$repo_stats
formals(rworkflows::use_workflow())
formals(rworkflows::use_workflow
)
length(formals(rworkflows::use_workflow))
devtools::check_man()
devtools::check_man()
library(rworkflows)
?use_workflow
devtools::check_man()
devtools::check_man()
devtools::check_man()
library(rworkflows)
library(rworkflows)
devtools::check_man()
?use_workflow
library(rworkflows)
library(rworkflows)
devtools::test_coverage()
rworkflows::use_workflow(template = "rworkflows_static", force_new = T)
library(rworkflows)
#### Use rworkflows_static ####
construct_conda_yml()
#### Use rworkflows_static ####
construct_conda_yml(preview = T)
#### Use rworkflows_static ####
construct_conda_yml(preview = TRUE,
save_path = file.path(tempdir(),"conda.yml"))
#### Use rworkflows_static ####
construct_conda_yml(dependencies = c("python>=3.9","anndata"),
preview = TRUE,
save_path = file.path(tempdir(),"conda.yml"))
#### Use rworkflows_static ####
environment_file <- construct_conda_yml(dependencies = c("python>=3.9","anndata"),
preview = TRUE,
save_path = file.path(tempdir(),"conda.yml"))
?use_workflow
yml4 <- use_workflow(template = "rworkflows_static",
return_path = FALSE,
force_new = TRUE,
miniforge_variant = "Mambaforge",
environment_file = environment_file,
save_dir = tempdir())
testthat::expect_equal(yml,yml3)
#### Use rworkflows_static ####
yml3 <- use_workflow(template = "rworkflows_static",
return_path = FALSE,
force_new = TRUE,
tinytex_installer = "TinyTeX",
save_dir = tempdir())
testthat::expect_equal(yml,yml3)
#### Non-defaults ###
args <- list(has_latex = TRUE,
run_bioccheck = TRUE,
run_vignettes = FALSE,
run_docker = TRUE,
docker_user = "octocat",
docker_org = "octolab")
yml <- use_workflow(has_latex = args$has_latex,
run_bioccheck = args$run_bioccheck,
run_vignettes = args$run_vignettes,
run_docker = args$run_docker,
docker_user = args$docker_user,
docker_org = args$docker_org,
force_new = TRUE,
return_path = FALSE,
save_dir = tempdir())
with <- yml$jobs$rworkflows$steps[[1]]$with
for(x in names(args)){
testthat::expect_equal(
if(with[[x]]=="${{ true }}") TRUE else if (with[[x]]=="${{ false }}") FALSE else with[[x]],
args[[x]])
}
#### Use rworkflows_static ####
yml3 <- use_workflow(template = "rworkflows_static",
return_path = FALSE,
force_new = TRUE,
tinytex_installer = "TinyTeX",
save_dir = tempdir())
#### Use rworkflows_static ####
yml3 <- use_workflow(template = "rworkflows_static",
return_path = FALSE,
force_new = TRUE,
tinytex_installer = "TinyTeX",
save_dir = tempdir())
testthat::expect_equal(yml,yml3)
testthat::expect_equal(yml$on,yml3$on)
yml$jobs$rworkflows$steps
yml$jobs$rworkflows$steps[[1]]$with$tinytex_installer
yml3$jobs$rworkflows$steps[[1]]$with$tinytex_installer
yml3$jobs$rworkflows$steps[[1]]$with
yml3$jobs[[1]]$steps[[1]]$with$tinytex_installer
yml$jobs[[1]]$steps[[1]]$with$tinytex_installer
yml$jobs[[1]]$steps[[1]]$with
yml3$jobs[[1]]$steps[[1]]$with
yml3$jobs[[1]]$steps[[1]]
yml3$jobs$yml$jobs[[1]]$steps[[1]]$with
yml$jobs[[1]]$steps[[1]]$with
length(yml$jobs[[1]]$steps)
length(yml3$jobs[[1]]$steps)
testthat::expect_gte(length(yml3$jobs[[1]]$steps),20)
testthat::expect_gte(length(yml3$jobs[[1]]$steps),20)
testthat::expect_equal(length(yml$jobs[[1]]$steps),1)
#### Modify conda args ####
environment_file <- construct_conda_yml(dependencies = c("python>=3.9","anndata"),
preview = TRUE,
save_path = file.path(tempdir(),"conda.yml"))
yml4 <- use_workflow(return_path = FALSE,
force_new = TRUE,
miniforge_variant = "Mambaforge",
environment_file = environment_file,
save_dir = tempdir())
yml4
testthat::expect_equal(yml$on,yml4$on)
yml$jobs$rworkflows$steps[[1]]$with$miniforge_variant
testthat::expect_null(yml$jobs$rworkflows$steps[[1]]$with$miniforge_variant)
miniforge_variant <- "Mambaforge"
yml4$jobs$rworkflows$steps[[1]]$with$miniforge_variant
testthat::expect_equal(yml4$jobs$rworkflows$steps[[1]]$with$miniforge_variant,
miniforge_variant)
testthat::expect_equal(yml4$jobs$rworkflows$steps[[1]]$with$environment_file,
environment_file)
yml4 <- use_workflow(return_path = FALSE,
force_new = TRUE,
miniforge_variant = miniforge_variant,
environment_file = environment_file,
save_dir = tempdir())
miniforge_variant <- TRUE
yml5 <- use_workflow(return_path = FALSE,
force_new = TRUE,
miniforge_variant = miniforge_variant,
environment_file = environment_file,
save_dir = tempdir())
testthat::expect_equal(yml$on,yml5$on)
testthat::expect_null(yml$jobs$rworkflows$steps[[1]]$with$miniforge_variant)
yml5$jobs$rworkflows$steps[[1]]$with$miniforge_variant
testthat::expect_equal(yml5$jobs$rworkflows$steps[[1]]$with$miniforge_variant,
"")
testthat::expect_equal(yml5$jobs$rworkflows$steps[[1]]$with$environment_file,
environment_file)
testthat::expect_equal(yml5$jobs$rworkflows$steps[[1]]$with$miniforge_variant,
"")
#### When python versions passed ####
runners <- construct_runners(python_version = "3.9")
runners
run_tests(runners = runners)
#### Set up tests ####
run_tests <- function(runners){
testthat::expect_length(runners,3)
for (r in runners){
testthat::expect_true(all(c("os","bioc","r") %in% names(r)))
}
}
#### When python versions passed ####
runners <- construct_runners(python_version = "3.9")
run_tests(runners = runners)
runners
package_version(runners[[1]]$r)>="4.3"
testthat::expect_true(
runners[[1]]$r=="auto"
)
runners[[1]]$r=="auto"
sapply(runners[[1]]$r, function(x)x=="auto")
testthat::expect_true(
sapply(runners, function(x)x$r=="auto")
)
all(sapply(runners, function(x)x$r=="auto"))
#### When python versions passed ####
python_version <- "3.9"
runners <- construct_runners(python_version = python_version)
run_tests(runners = runners)
testthat::expect_true(
all(sapply(runners, function(x)x$r=="auto"))
)
testthat::expect_true(
all(sapply(runners, function(x)x$r==python_version))
)
testthat::expect_true(
all(sapply(runners, function(x)x$python_version==python_version))
)
all(sapply(runners, function(x)x$python_version==python_version))
runners
all(sapply(runners, function(x)x$`python-version`==python_version))
testthat::expect_true(
all(sapply(runners, function(x)x$`python-version`==python_version))
)
usethis::use_test()
save_path <- tempfile(fileext = "myenv_conda.yml")
path1 <- construct_conda_yml(name="myenv",
dependencies=c("anndata","scanpy"),
return_path = TRUE,
save_path = save_path)
testthat::expect_true(file.exists(path1))
yml1 <- construct_conda_yml(name="myenv",
dependencies=c("anndata","scanpy"),
return_path = FALSE,
save_path = save_path)
testthat::expect_true(all(c("name","channels","dependencies") %in% names(yml1)))
yml2 <- construct_conda_yml(name="myenv",
dependencies=c("anndata>=1.0","scanpy<20.1.1"),
pip = c("mytool1","mytool2"),
return_path = FALSE,
save_path = save_path)
testthat::expect_true(all(c("name","channels","dependencies") %in% names(yml2)))
testthat::expect_true(all(c("mytool1","mytool2") %in% yml2$dependencies[[4]][[1]]))
yml3 <- construct_conda_yml(name="myenv",
dependencies=c("anndata","scanpy"),
preview = TRUE,
return_path = FALSE,
save_path = save_path)
testthat::expect_true(all(c("name","channels","dependencies") %in% names(yml3)))
if(condaenv_exists(envname)){
reticulate::conda_remove(envname = envname)
}
if(rworkflows:::condaenv_exists(envname)){
reticulate::conda_remove(envname = envname)
}
#### From conda yaml ####
path2 <- construct_conda_yml(name=envname,
dependencies=list("python"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE,
save_path = save_path)
envname <- "testenv"
#### From conda yaml ####
path2 <- construct_conda_yml(name=envname,
dependencies=list("python"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE,
save_path = save_path)
testthat::expect_true(file.exists(path2))
out <- reticulate::conda_create(environment = path2,
envname = envname)
reticulate::conda_remove(envname = envname)
out <- reticulate::conda_create(environment = path2,
envname = envname)
testthat::expect_true(file.exists(out))
testthat::expect_equal(basename(out),"python")
testthat::expect_equal(basename(dirname(dirname(out))),envname)
out
envname
### Test conda_export
exported_yml <- conda_export(envname)
testthat::expect_true(file.exists(exported_yml))
yaml::read_yaml(exported_yml)
readLines(exported_yml)
length(readLines(exported_yml))
testthat::expect_gte(length(readLines(exported_yml)),20)
library(rworkflows)
Sys.getenv("CONDA")
Sys.getenv("CONDA")!=""
use_workflow(template = "rworkflows_static",force_new = T)
library(rworkflows)
template
template="rworkflows:dev"
branch <- gsub(".*:","",template)
template <- gsub(":.*","",template)
branch
template
template="rworkflows_static:dev"
branch <- gsub(".*:","",template)
template <- gsub(":.*","",template)
branch
template
devtools::check_man()
library(rworkflows)
use_workflow(template = "rworkflows_static:dev",force_new = T)
devtools::check_man()
library(rworkflows)
use_workflow(template = "rworkflows_static:dev",force_new = T)
library(rworkflows)
library(rworkflows)
use_workflow(template = "rworkflows_static:dev",force_new = T)
library(rworkflows)
use_workflow(template = "rworkflows_static:dev",force_new = T)
library(rworkflows)
use_workflow(template = "rworkflows_static:dev",force_new = T)
library(rworkflows)
use_workflow(template = "rworkflows_static:dev",force_new = T)
library(rworkflows)
use_workflow(template = "rworkflows_static:dev",force_new = T)
template = "rworkflows_static:dev"
grepl(":",template)
name=template
grepl(":",template)
gsub("[:]","_",name)
library(rworkflows)
use_workflow(template = "rworkflows_static:dev",force_new = T)
use_workflow(template = "rworkflows_static:dev",force_new = T)
use_workflow(template = "rworkflows_static:dev",force_new = T)
use_workflow(template = "rworkflows_static:dev",force_new = T)
construct_cont()
cont <- construct_cont(cont = paste(docker_org,pkg),
default_registry = params$docker_registry)
docker_org="neurogenomics"
cont <- construct_cont(cont = paste(docker_org,pkg),
default_registry = params$docker_registry)
pkg="rworkflows"
cont <- construct_cont(cont = paste(docker_org,pkg),
default_registry = params$docker_registry)
paste(docker_org,pkg)
cont <- construct_cont(cont = paste(docker_org,pkg,sep="/"),
default_registry = params$docker_registry)
cont
cont <- construct_cont(cont = paste(docker_org,pkg,sep="/"),
default_registry = params$docker_registry)[[1]]
cont
cont
paste("https://hub.docker.com/repository",cont,sep="/")
paste("https://hub.docker.com/repository",docker_org,pkg,sep="/")
cont
paste("https://hub.docker.com/repository/docker",docker_org,pkg,sep="/")
https://hub.docker.com/repository/docker/neurogenomicslab/rworkflows/generalpaste("https://hub.docker.com/repository/docker",docker_org,pkg,"general",sep="/")
paste("https://hub.docker.com/repository/docker",docker_org,pkg,"general",sep="/")
docker_org\
docker_org
docker_org="neurogenomicslab"
docker_org
paste("https://hub.docker.com/repository/docker",docker_org,pkg,"general",sep="/")
devtools::document()
devtools::check_man()
library(rworkflows)
use_vignette_docker(force_new = T)
use_vignette_docker("neurogenomics",force_new = T)
library(rworkflows)
use_vignette_docker("neurogenomics",force_new = T)
library(rworkflows)
use_vignette_docker("neurogenomics",force_new = T)
cont
library(rworkflows)
use_vignette_docker("neurogenomics",force_new = T)
paste("https://ghcr.io",cont,sep="/")
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
use_vignette_docker("neurogenomics",force_new = T)
res=readRDS(here::here("reports","dep_graph_res.rds"))
res
res$plot
print(res$plot)
print(res$graph)
res$plot
visNetwork::visNetwork(res$plot)
browseURL(here::here("reports","rworkflows_depgraph.html"))
?echodeps::visnet_save
echodeps::visnet_save
url = here::here("reports","rworkflows_depgraph.html")
url
