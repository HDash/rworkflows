for(action in add_actions){
h[paste0("actions_",action)] <-
badger::badge_github_actions(action = action)
}
}
if(isTRUE(add_commit)){
messager("Adding commit.",v=verbose)
h["commit"] <- badger::badge_last_commit(branch = branch)
}
#### Other metadata ####
if(isTRUE(add_code_size)){
messager("Adding code size",v=verbose)
h["codesize"] <- badger::badge_code_size()
}
if(isTRUE(add_codecov)){
messager("Adding codecov.",v=verbose)
h["codecov"] <- badger::badge_codecov(branch = branch)
}
if(isTRUE(add_license)){
messager("Adding license.",v=verbose)
h["license"] <-  badger::badge_license(color = colors$default)
}
if(!is.null(add_doi)){
messager("Adding DOI.",v=verbose)
h["doi"] <-  badger::badge_doi(doi = add_doi,
color = colors$default)
}
#### Bioc-specific badges #####
if(isTRUE(add_bioc_release)){
messager("Adding Bioconductor release version.",v=verbose)
h["bioc_release"] <-  badger::badge_bioc_release(color = colors$bioc)
}
if(isTRUE(add_bioc_download_month)){
messager("Adding Bioc downloads: by month",v=verbose)
h["bioc_download_month"] <-  badger::badge_bioc_download(
by = "month",
color = colors$bioc)
}
if(isTRUE(add_bioc_download_total)){
messager("Adding Bioc downloads: by total",v=verbose)
h["bioc_download_total"] <-  badger::badge_bioc_download(
by = "total",
color = colors$bioc)
}
if(isTRUE(add_bioc_download_rank)){
messager("Adding license.",v=verbose)
h["bioc_download_rank"] <-  badger::badge_bioc_download_rank()
}
#### CRAN-specific badges #####
if(isTRUE(add_cran_release)){
messager("Adding CRAN release version.",v=verbose)
h["cran_release"] <- badger::badge_cran_release(color = colors$cran)
}
if(isTRUE(add_cran_checks)){
messager("Adding CRAN checks.",v=verbose)
h["cran_checks"] <- badger::badge_cran_checks()
}
if(isTRUE(add_cran_download_month)){
messager("Adding CRAN downloads: last-month",v=verbose)
h["cran_download_month"] <-  badger::badge_cran_download(
type = "last-month",
color = colors$cran)
}
if(isTRUE(add_cran_download_total)){
messager("Adding CRAN downloads: grand-total",v=verbose)
h["cran_download_total"] <-  badger::badge_cran_download(
type = "grand-total",
color = colors$cran)
}
#### Authors ####
if(isTRUE(add_authors)){
messager("Adding authors.",v=verbose)
h["authors"] <- get_authors(add_html = TRUE)
}
#### Return ####
if(isTRUE(as_list)){
return(h)
} else {
#### Add a break after the first item (usually hex sticker) ####
if(!is.null(h[["hex"]])){
hc <- paste(paste0(h[1],"<br><br>"),
paste(h[-1],collapse=sep),
sep=sep)
} else {
hc <- paste(h,collapse=sep)
}
cat(hc)
return(hc)
}
}
h$hex
is.null(h$hex)
h[names(h)!="hex"]
h[1]
library(rworkflows)
rworkflows::use_workflow(name = "rworkflows_static")
rworkflows::use_workflow(name = "rworkflows_static", force_new = T)
library(rworkflows)
rworkflows::use_workflow(name = "rworkflows_static", force_new = T)
rworkflows::use_workflow(name = "rworkflows_static", force_new = T)
rworkflows::use_workflow(name = "rworkflows_static", force_new = T)
library(rworkflows)
rworkflows::use_workflow(name = "rworkflows_static", force_new = T)
library(rworkflows)
?covr::codecov()
covr::codecov()
covr::codecov()
covr::codecov()
View(covr::codecov())
View(covr::codecov
)
usethis::use_test()
library(rworkflows)
usethis::use_test()
rworkflows:::url_exists("https://github.com/neurogenomics/rworkflows")
testthat::expect_false(
rworkflows:::url_exists("https://github.com/neurogenomics/rworkflowsTYPOOOOO")
)
usethis::use_test()
rworkflows:::get_yaml(name = "rworkflows")
is(rworkflows:::get_yaml(name = "rworkflows"))
testthat::expect_type(
rworkflows:::get_yaml(name = "rworkflows"),
"list"
)
testthat::expect_type(
rworkflows:::get_yaml(name = "rworkflows_static"),
"list"
)
testthat::expect_error(
rworkflows:::get_yaml(name = "TYPOOOOO")
)
usethis::use_test()
ver3 <- bioc_r_versions(bioc_version="3.16")
testthat::expect_true(ver2$bioc>=3.16)
testthat::expect_true(ver3$bioc>=3.16)
testthat::expect_true(ver3$r>="4.2.0")
ver4 <- bioc_r_versions(bioc_version=NULL)
ver4
length(ver4$r_ver_for_bioc_ver)
ver4
length(ver4)
usethis::use_test()
runners2 <- construct_runners(os = c("ubuntu-latest","macOS-latest","TYPOOOO"))
runners2
runners2 <- construct_runners(bioc=c("typo"="typo"))
testthat::expect_error(
construct_runners(r=c("typo"="typo"))
)
testthat::expect_error(
construct_runners(cont=c("typo"="typo"))
)
## At least test some part of it that don't require the DESCRIPTION file
file.copy("https://raw.githubusercontent.com/neurogenomics/rworkflows/master/DESCRIPTION",
"DESCRIPTION")
## At least test some part of it that don't require the DESCRIPTION file
tmp <- tempfile(fileext = "DESCRIPTION")
utils::download.file("https://raw.githubusercontent.com/neurogenomics/rworkflows/master/DESCRIPTION",
tmp)
utils::packageDescription("rworkflows")
## At least test some part of it that don't require the DESCRIPTION file
description <- utils::packageDescription("rworkflows")
description
writeLines(description,"./DESCRIPTION2")
is(description)
as.list(description)
writeLines(as.list(description),"./DESCRIPTION2")
as.list(description)
lapply(description)
lapply(description, function(x)x)
cat(description)
unlist(lapply(description, function(x)x))
is(description)
## At least test some part of it that don't require the DESCRIPTION file
desc::desc()
## At least test some part of it that don't require the DESCRIPTION file
d = desc::desc()
is(d)
as.list(D)
as.list(d)
d$str()
## At least test some part of it that don't require the DESCRIPTION file
d = desc::desc(package = "rworkflows")
# description <- utils::packageDescription("rworkflows")
writeLines(d$str(),"./DESCRIPTION2")
as.character(description)
as.character(lapply(description,function(x)x))
d$str()
d$str(normalize = T)
?d$str(normalize = T)
?str
description$str()
str(description)
as.character(str(description))
# description <- utils::packageDescription("rworkflows")
writeLines(str(description),"./DESCRIPTION2")
# description <- utils::packageDescription("rworkflows")
writeLines(lapply(str(description),as.character),"./DESCRIPTION2")
lapply(str(description),as.character)
badger::badge_github_version()
badger::badge_github_version(color = "blue")
badge_github_actions("GuangchuangYu/badger")
badger::badge_github_actions("GuangchuangYu/badger")
badges <- use_badges(add_hex = TRUE,
add_actions = "rworkflow",
add_doi = "doi:000000",
add_github_version = TRUE,
add_commit = TRUE,
add_code_size = TRUE,
add_codecov = TRUE,
add_license = TRUE,
add_authors = TRUE,
add_bioc_release = TRUE)
### As list ####
badges2 <_ use_badges(as_list = TRUE)
### As list ####
badges2 <- use_badges(as_list = TRUE)
badges2
source("~/Desktop/rworkflows/tests/testthat/test-use_badges.R", echo=TRUE)
length(badges2)
badges <- use_badges(add_hex = TRUE,
add_actions = "rworkflow",
add_doi = "doi:000000",
add_github_version = TRUE,
add_commit = TRUE,
add_code_size = TRUE,
add_codecov = TRUE,
add_license = TRUE,
add_authors = TRUE,
add_cran_release = TRUE,
add_cran_checks = TRUE,
add_cran_download_month = TRUE,
add_cran_download_total = TRUE
)
is(badges)
length(badges)
testthat::expect_type(badges,"character")
R.Version()$status
getFromNamespace("currentPackageName","badger")
?badger::badge_bioc_release
devtools::document()
library(rworkflows)
use_badges(pkg = "BiocManager", add_bioc_release = TRUE)
run_tests <- function(badges){
testthat::expect_length(badges,1)
testthat::expect_type(badges,"character")
}
#### Failures expected since rworkflows not on Bioc ####
badges3 <- use_badges(pkg = "BiocManager",
add_bioc_release = TRUE,
add_bioc_download_month = TRUE,
add_bioc_download_total = TRUE,
add_bioc_download_rank = TRUE)
badges3
#### Explicitly specify package ####
badges3 <- use_badges(pkg = "BiocManager",
add_bioc_release = TRUE,
add_bioc_download_month = TRUE,
add_bioc_download_total = TRUE,
add_bioc_download_rank = TRUE,
as_list = TRUE)
length(badges3)
devtools::document()
library(rworkflows)
testthat::expect_error(
use_badges()
)
?badger::badge_codecov
badger::badge_codecov() branch = "master")
badger::badge_codecov(branch = "master")
badger::badge_codecov()
princurve:
badger::badge_codecov("princurve", branch = "master")
badger::badge_codecov("princurve")
badger::badge_codecov("rcannood/princurve", branch = "master")
out1=badger::badge_codecov("rcannood/princurve", branch = "master")
out2
out1
out2=badger::badge_codecov("rcannood/princurve")
out2
out1==out2
out1=badger::badge_codecov("GuangchuangYu/badger", branch = "master")
out1
badger::badge_codecov("rworkflows")
badger::badge_codecov()
badger::badge_codecov(branch = "master")
branch="master"
gsub("app.codecov.io","codecov.io",
badger::badge_codecov(branch = branch)
)
devtools::document()
library(rworkflows)
library(rworkflows)
library(rworkflows)
badges <- use_badges(pkg = "neurogenomics/rworkflows",
add_hex = FALSE,
add_actions = "rworkflow",
add_doi = "doi:000000",
add_github_version = TRUE,
add_commit = TRUE,
add_code_size = TRUE,
add_codecov = TRUE,
add_license = TRUE,
add_authors = TRUE,
add_cran_release = TRUE,
add_cran_checks = TRUE,
add_cran_download_month = TRUE,
add_cran_download_total = TRUE
)
View(badger::::currentPackageName())
View(badger::::currentPackageName
View(badge:::currentPackageName
)
View(badger:::currentPackageName)
basename(NULL)
currentGitHubRef <- utils::getFromNamespace("currentGitHubRef","badger")
pkg <- currentGitHubRef(ref = ref)
library(rworkflows)
#### Explicitly specify package ####
badges3 <- use_badges(ref = "BiocManager",
add_hex = FALSE,
add_bioc_release = TRUE,
add_bioc_download_month = TRUE,
add_bioc_download_total = TRUE,
add_bioc_download_rank = TRUE,
as_list = TRUE)
badges3
badges <- use_badges(ref = "neurogenomics/rworkflows",
add_hex = FALSE,
add_actions = "rworkflow",
add_doi = "doi:000000",
add_github_version = TRUE,
add_commit = TRUE,
add_code_size = TRUE,
add_codecov = TRUE,
add_license = TRUE,
add_authors = TRUE,
add_cran_release = TRUE,
add_cran_checks = TRUE,
add_cran_download_month = TRUE,
add_cran_download_total = TRUE
)
library(rworkflows)
?
badger::badge_github_version
library(rworkflows)
library(rworkflows)
?
badger::badge_github_actions
devtools::document()
library(rworkflows)
library(rworkflows)
library(rworkflows)
?badger::badge_last_commit
devtools::document()
remote <- paste0("https://github.com/",ref,"/raw/master/DESCRIPTION")
remote
?
currentGitHubRef
currentGitHubRef
#### Get ref/pkg ####
currentGitHubRef <- utils::getFromNamespace("currentGitHubRef","badger")
ref <- currentGitHubRef(ref = ref)
currentGitHubRef
badger:::currentPackageName
path_ <- file.path("..",path)
path="./DESCRIPTION"
path_ <- file.path("..",path)
path_
normalizePath(path_)
path.expand(path_)
path=NULL
path_ <- file.path("..",path)
path_
utils::packageDescription("sdes")
utils::packageDescription(basename(ref)
is.na(utils::packageDescription(basename(ref)))
ref="neurogenomics/rworkflows"
is.na(utils::packageDescription(basename(ref)))
all(is.na(utils::packageDescription(basename(ref))))
d
d
d=suppressWarnings(utils::packageDescription(basename(ref)))
d
is(d)
devtools::document()
devtools::document()
library(rworkflows)
devtools::document()
d <- get_description(ref="neurogenomics/rworkflows")
d
rworkflows::use_badges()
badges <- rworkflows::use_badges(ref = "neurogenomics/rworkflows")
devtools::document()
library(rworkflows)
?desc::desc
d <- get_description(ref = ref)
d[["LICENCE"]]
d[["LICENSE"]]
d$str(by_field = "LICENSE")
d$get_field("LICENSE")
d
d$get_field("License")
library(rworkflows)
ref
remote <- paste0("https://github.com/",ref,"/raw/master/DESCRIPTION")
d <- desc::desc(file = remote)
remote
tmp <- tempfile(fileext = "DESCRIPTION")
utils::download.file(remote,tmp)
d <- desc::desc(file = tmp)
d
d <- desc::desc(file = url(remote))
devtools::loaded_packages()
devtools::document()
library(rworkflows)
fields <- desc::desc_fields(d)
d$get_field()
d$get_field("Authors")
d$get_field("Authors@R")
fields <- d$fields()
fields
fields <- grep("Authors",fields,value = TRUE)[[1]]
field <- grep("Authors",d$fields(),value = TRUE)[[1]]
field
authors <- d$get_field(field)
authors
auths <- eval(parse(text = gsub('person','c',authors)));
authors <- paste(auths[names(auths)=='given'],
auths[names(auths)=='family'], collapse = ', ')
authors
devtools::document()
library(rworkflows)
badges <- use_badges(ref = "neurogenomics/rworkflows",
add_hex = FALSE,
add_actions = "rworkflow",
add_doi = "doi:000000",
add_github_version = TRUE,
add_commit = TRUE,
add_code_size = TRUE,
add_codecov = TRUE,
add_license = TRUE,
add_authors = TRUE,
add_cran_release = TRUE,
add_cran_checks = TRUE,
add_cran_download_month = TRUE,
add_cran_download_total = TRUE
)
run_tests(badges)
#### Explicitly specify package ####
badges3 <- use_badges(ref = "BiocManager",
add_hex = FALSE,
add_bioc_release = TRUE,
add_bioc_download_month = TRUE,
add_bioc_download_total = TRUE,
add_bioc_download_rank = TRUE,
as_list = TRUE)
#### Explicitly specify package ####
badges3 <- use_badges(ref = "BiocManager",
add_hex = FALSE,
add_bioc_release = TRUE,
add_bioc_download_month = TRUE,
add_bioc_download_total = TRUE,
add_bioc_download_rank = TRUE,
add_github_version = FALSE,
as_list = TRUE)
#### Explicitly specify package ####
badges3 <- use_badges(ref = "BiocManager",
add_hex = FALSE,
add_bioc_release = TRUE,
add_bioc_download_month = TRUE,
add_bioc_download_total = TRUE,
add_bioc_download_rank = TRUE,
### These only work if you have the DESCRIPTION file or a proper ref
add_github_version = FALSE,
add_license = FALSE,
add_authors = FALSE,
as_list = TRUE)
testthat::expect_gte(length(badges3),8)
usethis::use_test()
devtools::document()
badger::badge_cran_checks(pkg = "rworkflows")
badger::badge_cran_download("rworkflows")
badger::badge_cran_download("rworkflows", color = "blue")
badger::badge_cran_checks(pkg = pkg)
badger::badge_bioc_download_rank("orthogene")
devtools::document()
library(rworkflows)
devtools::document()
library(rworkflows)
devtools::document()
library(rworkflows)
devtools::document()
library(rworkflows)
devtools::document()
library(rworkflows)
devtools::document()
devtools::check_man()
library(rworkflows)
res <- echodeps::dep_graph(pkg = "rworkflows",
method = "github",
shape = "hexagon",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
res
?build_site_github_pages
?pkgdown::build_site_github_pages
?badger::badge_last_commit
badger::badge_codecov(ref = "neurogenomics/rworkflows")
