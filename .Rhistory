paths <- refs_to_list(refs = paths)
if(methods::is(refs[[1]],"description")) {
refs <- get_description_check(dl = refs,
verbose = verbose)
return(refs)
}
if(methods::is(paths[[1]],"description")) {
paths <- get_description_check(dl = paths,
verbose = verbose)
return(paths)
}
if(all(is.na(refs))) refs <- NULL
use_repos
#### Method 1 ####
if(isFALSE(use_repos) ||
is.null(refs)){
dl1 <- get_description_manual(refs=refs,
paths=paths,
cache_dir=cache_dir,
force_new=force_new,
use_wd=use_wd,
verbose=verbose)
dl1 <- get_description_check(dl = dl1,
verbose=verbose)
refs <- names(dl1)
if(!is.null(unlist(dl1))){
if(all(basename(unlist(refs)) %in% basename(names(dl1)))) {
return(dl1)
}
}
} else {
#### Method 2 ####
for(ref in refs){
dl2 <- get_description_repo(refs = refs,
verbose=verbose)
dl2 <- get_description_check(dl = dl2,
verbose = verbose)
}
return(dl2)
}
dl2 <- get_description_repo(refs = refs,
verbose=verbose)
refs
refs
messager("Searching for DESCRIPTION file(s) in R repositories:",
paste(repo,collapse = ", "),v=verbose)
tmp_dir <- file.path(tempdir(),"BiocPkgTools")
dir.create(tmp_dir,showWarnings = FALSE, recursive = TRUE)
repo
devoptera::args2vars(get_description_repo, reassign = TRUE)
refs="neurogenomics/rworkflows"
#### Import each database ####
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
#### Cache a local copy ####
tmp <- file.path(tmp_dir,paste0(x,".rds"))
if(file.exists(tmp)){
db_i <- readRDS(tmp)
} else {
db_i <- BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
saveRDS(db_i, tmp)
}
return(db_i)
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
db
refs
refs
paths <- check_paths(refs = refs,
paths = paths,
verbose = verbose)
refs <- refs_to_list(refs = refs)
paths <- refs_to_list(refs = paths)
if(methods::is(refs[[1]],"description")) {
refs <- get_description_check(dl = refs,
verbose = verbose)
return(refs)
}
if(methods::is(paths[[1]],"description")) {
paths <- get_description_check(dl = paths,
verbose = verbose)
return(paths)
}
refs
db
names(is.null(refs))
basename(unlist(refs))
if(names(is.null(refs))) names(refs) <- basename(unlist(refs))
basename(unlist(refs))
source("~/Desktop/rworkflows/R/get_description_repo.R")
if(is.null(names(refs))) names(refs) <- basename(unlist(refs))
if(!is.null(refs)) db <- db[Package %in% basename(refs),]
if(!is.null(refs)) db <- db[Package %in% names(refs),]
if(nrow(db)==0) {
messager("0 DESCRIPTION files found in CRAN/Bioc.",
"Returning NULL.",v=verbose)
return(NULL)
}
#### Parse GitHub URL #####
db <- get_github_url_db(db = db, return_dt = TRUE)
db
db
#### Split GitHub URL ####
db <- cbind(db,BiocPkgTools::githubURLParts(urls = db$url_github))
data.table::setnames(db,c("user_repo","user"),c("owner_repo","owner"),
skip_absent = TRUE)
source("~/Desktop/rworkflows/R/get_description_repo.R")
source("~/Desktop/rworkflows/R/get_description.R")
refs="neurogenomics/rworkflows"
####
d13 <- get_description(refs="neurogenomics/rworkflows",
use_repos = TRUE)
refs="neurogenomics/rworkflows"
paths <- check_paths(refs = refs,
paths = paths,
verbose = verbose)
refs <- refs_to_list(refs = refs)
paths <- refs_to_list(refs = paths)
if(methods::is(refs[[1]],"description")) {
refs <- get_description_check(dl = refs,
verbose = verbose)
return(refs)
}
if(methods::is(paths[[1]],"description")) {
paths <- get_description_check(dl = paths,
verbose = verbose)
return(paths)
}
if(all(is.na(refs))) refs <- NULL
#### Method 1 ####
if(isFALSE(use_repos) ||
is.null(refs)){
dl1 <- get_description_manual(refs=refs,
paths=paths,
cache_dir=cache_dir,
force_new=force_new,
use_wd=use_wd,
verbose=verbose)
dl1 <- get_description_check(dl = dl1,
verbose=verbose)
refs <- names(dl1)
if(!is.null(unlist(dl1))){
if(all(basename(unlist(refs)) %in% basename(names(dl1)))) {
return(dl1)
}
}
} else {
#### Method 2 ####
for(ref in refs){
dl2 <- get_description_repo(refs = refs,
verbose=verbose)
dl2 <- get_description_check(dl = dl2,
verbose = verbose)
}
return(dl2)
}
#### Method 2 ####
dl2 <- get_description_repo(refs = refs,
verbose=verbose)
refs
refs
messager("Searching for DESCRIPTION file(s) in R repositories:",
paste(repo,collapse = ", "),v=verbose)
tmp_dir <- file.path(tempdir(),"BiocPkgTools")
dir.create(tmp_dir,showWarnings = FALSE, recursive = TRUE)
#### Import each database ####
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
#### Cache a local copy ####
tmp <- file.path(tmp_dir,paste0(x,".rds"))
if(file.exists(tmp)){
db_i <- readRDS(tmp)
} else {
db_i <- BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
saveRDS(db_i, tmp)
}
return(db_i)
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
refs
if(is.null(names(refs))) names(refs) <- basename(unlist(refs))
if(!is.null(refs)) db <- db[Package %in% names(refs),]
if(nrow(db)==0) {
messager("0 DESCRIPTION files found in CRAN/Bioc.",
"Returning NULL.",v=verbose)
return(NULL)
}
#### Parse GitHub URL #####
db <- get_github_url_db(db = db,
return_dt = TRUE)
#### Split GitHub URL ####
db <- cbind(db,BiocPkgTools::githubURLParts(urls = db$url_github))
data.table::setnames(db,c("user_repo","user"),c("owner_repo","owner"),
skip_absent = TRUE)
dt_to_desc(db = db,
refs = refs,
verbose = verbose)
source("~/Desktop/rworkflows/R/get_description_check.R")
refs <- get_description_check(dl = refs, verbose = verbose)
refs
source("~/Desktop/rworkflows/R/get_description_check.R")
refs <- get_description_check(dl = refs, verbose = verbose)
refs
if(!is.null(refs)) db <- db[Package %in% names(refs),]
if(nrow(db)==0) {
messager("0 DESCRIPTION files found in CRAN/Bioc.",
"Returning NULL.",v=verbose)
return(NULL)
}
#### Parse GitHub URL #####
db <- get_github_url_db(db = db,
return_dt = TRUE)
#### Split GitHub URL ####
db <- cbind(db,BiocPkgTools::githubURLParts(urls = db$url_github))
data.table::setnames(db,c("user_repo","user"),c("owner_repo","owner"),
skip_absent = TRUE)
dt_to_desc(db = db,
refs = refs,
verbose = verbose)
db
db <- data.table::as.data.table(db)
if(is.null(refs)){
refs <- db$Package
}else{
refs <- refs[basename(refs) %in% db$Package]
}
refs <- refs[basename(names(refs)) %in% db$Package]
messager("Constructing DESCRIPTION files for",
formatC(length(refs),big.mark = ","),"R packages.",v=verbose)
valid_fields <-desc::cran_valid_fields
lapply(stats::setNames(basename(refs),
refs),
function(p){
messager("Constructing DESCRIPTION for:",p,v=verbose)
db_sub <- db[Package==p,][1,]
d <- desc::description$new("!new")
for(k in names(db_sub)){
vals <- db_sub[[k]]
if(is.list(vals)) vals <- unlist(vals)
vals <- vals[vals!=""]
if(k %in% valid_fields &&
!all(is.na(vals))){
d$set_list(key = k,
list_value = vals) |>
suppressWarnings()
}
}
d
})
lapply(stats::setNames(basename(names(refs)),
refs),
function(p){
messager("Constructing DESCRIPTION for:",p,v=verbose)
db_sub <- db[Package==p,][1,]
d <- desc::description$new("!new")
for(k in names(db_sub)){
vals <- db_sub[[k]]
if(is.list(vals)) vals <- unlist(vals)
vals <- vals[vals!=""]
if(k %in% valid_fields &&
!all(is.na(vals))){
d$set_list(key = k,
list_value = vals) |>
suppressWarnings()
}
}
d
})
source("~/Desktop/rworkflows/R/dt_to_desc.R")
source("~/Desktop/rworkflows/R/get_description_repo.R")
####
d13 <- get_description(refs="neurogenomics/rworkflows",
use_repos = TRUE)
d13
refs="neurogenomics/rworkflows"
paths <- check_paths(refs = refs,
paths = paths,
verbose = verbose)
refs <- refs_to_list(refs = refs)
paths <- refs_to_list(refs = paths)
if(methods::is(refs[[1]],"description")) {
refs <- get_description_check(dl = refs,
verbose = verbose)
return(refs)
}
if(methods::is(paths[[1]],"description")) {
paths <- get_description_check(dl = paths,
verbose = verbose)
return(paths)
}
if(all(is.na(refs))) refs <- NULL
#### Method 1 ####
if(isFALSE(use_repos) ||
is.null(refs)){
dl1 <- get_description_manual(refs=refs,
paths=paths,
cache_dir=cache_dir,
force_new=force_new,
use_wd=use_wd,
verbose=verbose)
dl1 <- get_description_check(dl = dl1,
verbose=verbose)
refs <- names(dl1)
if(!is.null(unlist(dl1))){
if(all(basename(unlist(refs)) %in% basename(names(dl1)))) {
return(dl1)
}
}
} else {
#### Method 2 ####
dl2 <- get_description_repo(refs = refs,
verbose = verbose)
for(ref in refs){
dl2 <- get_description_check(dl = dl2,
verbose = verbose)
}
return(dl2)
}
refs
#### Method 2 ####
dl2 <- get_description_repo(refs = refs,
verbose = verbose)
dl2
refs
tmp_dir <- file.path(tempdir(),"BiocPkgTools")
dir.create(tmp_dir,showWarnings = FALSE, recursive = TRUE)
#### Import each database ####
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
#### Cache a local copy ####
tmp <- file.path(tmp_dir,paste0(x,".rds"))
if(file.exists(tmp)){
db_i <- readRDS(tmp)
} else {
db_i <- BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
saveRDS(db_i, tmp)
}
return(db_i)
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
db
refs <- get_description_check(dl = refs, verbose = verbose)
refs
basename(names(refs))
if(!is.null(refs)) db <- db[Package %in% basename(names(refs)),]
if(nrow(db)==0) {
messager("0 DESCRIPTION files found in CRAN/Bioc.",
"Returning NULL.",v=verbose)
return(NULL)
}
#### Parse GitHub URL #####
db <- get_github_url_db(db = db,
return_dt = TRUE)
db
db
#### Split GitHub URL ####
db <- cbind(db,BiocPkgTools::githubURLParts(urls = db$url_github))
data.table::setnames(db,c("user_repo","user"),c("owner_repo","owner"),
skip_absent = TRUE)
dt_to_desc(db = db,
refs = refs,
verbose = verbose)
db
refs
refs
[basename(names(refs))
refs <- refs[basename(names(refs)) %in% db$Package]
refs
messager("Constructing DESCRIPTION files for",
formatC(length(refs),big.mark = ","),"R package(s).",v=verbose)
valid_fields <- desc::cran_valid_fields
lapply(stats::setNames(names(refs),
refs),
function(p){
p <- basename(p)
messager("Constructing DESCRIPTION for:",p,v=verbose)
db_sub <- db[Package==p,][1,]
d <- desc::description$new("!new")
for(k in names(db_sub)){
vals <- db_sub[[k]]
if(is.list(vals)) vals <- unlist(vals)
vals <- vals[vals!=""]
if(k %in% valid_fields &&
!all(is.na(vals))){
d$set_list(key = k,
list_value = vals) |>
suppressWarnings()
}
}
d
})
source("~/Desktop/rworkflows/R/dt_to_desc.R")
dt_to_desc(db = db,
refs = refs,
verbose = verbose)
#### Method 2 ####
dl2 <- get_description_repo(refs = refs,
verbose = verbose)
dl2 <- get_description_check(dl = dl2,
verbose = verbose)
dl2
source("~/Desktop/rworkflows/R/get_description.R")
####
d13 <- get_description(refs="neurogenomics/rworkflows",
use_repos = TRUE)
d13
testthat::expect_equal(d13[[1]],
d1[[1]])
run_tests <- function(dl){
for(i in seq_len(length(dl))){
d <- dl[[i]]
testthat::expect_true(methods::is(d,"description"))
testthat::expect_equal(basename(names(dl)[i]),
d$get_field("Package"))
}
}
d1 <- get_description(refs="neurogenomics/rworkflows")
testthat::expect_equal(d13[[1]],
d1[[1]])
d13[[1]]
d1[[1]]
d13 <- get_description(refs="neurogenomics/rworkflows",
use_wd = FALSE)
d14 <- get_description(refs="neurogenomics/rworkflows",
use_wd = FALSE)
d14
testthat::expect_equal(d14[[1]],
d1[[1]])
d14 <- get_description(refs="neurogenomics/orthogene",
use_wd = FALSE)
testthat::expect_equal(d14[[1]],
d1[[1]])
d14
testthat::expect_true(methods::is(d14[[1]],"description"))
devtools::document()
library(rworkflows)
library(rworkflows)
devtools::check_man()
library(rworkflows)
db <- BiocPkgTools::biocPkgList()
dl <- dt_to_desc(db=db, refs="GenomicRanges")
dl
workflow <- rworkflows::use_workflow(run_bioccheck = FALSE,
run_rcmdcheck = TRUE,
run_pkgdown = TRUE,
run_docker = TRUE,
docker_user = "bschilder",
docker_org = "neurogenomicslab",
## Use default save_dir in practice
save_dir = tempdir())
workflow_static <- rworkflows::use_workflow(name = "rworkflows_static",
run_bioccheck = FALSE,
run_rcmdcheck = TRUE,
run_pkgdown = TRUE,
run_docker = TRUE,
docker_user = "bschilder",
docker_org = "neurogenomicslab",
## Use default save_dir in practice
save_dir = tempdir())
## Use default save_dir in practice
dockerfile <- rworkflows::use_dockerfile(save_dir = tempdir())
## Use default save_dir in practice
readme <- rworkflows::use_readme(save_dir = tempdir())
## Use default save_dir in practice
vignette2 <- rworkflows::use_vignette_docker(docker_org = "neurogenomicslab",
save_dir = tempdir())
badges <- rworkflows::use_badges()
library(rworkflows)
library(rworkflows)
devtools::build_manual(path = "inst")
devtools::document()
library(rworkflows)
devtools::check_man()
library(rworkflows)
devtools::document()
library(rworkflows)
?install.packages
rworkflows::use_workflow(name = "rworkflows_static", run_pkgdown = FALSE, force_new = T)
devtools::document()
library(rworkflows)
devoptera::args2vars(use_workflow);  docker_org <- eval(docker_org)
#### Check for existing yaml ####
path <- file.path(save_dir,paste0(name,".yml"))
path
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
yml
devtools::document()
library(rworkflows)
devoptera::args2vars(use_workflow);  docker_org <- eval(docker_org)
#### Check for existing yaml ####
path <- file.path(save_dir,paste0(name,".yml"))
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
yml
devtools::check_man()
devtools::check_man()
### [Vignettes](https://neurogenomics.github.io/rworkflows/articles)
#### [Get started](https://neurogenomics.github.io/rworkflows/articles/rworkflows.html)
Introductory vignette for using `rworkflows`.
?rworkflows::use_workflow
devtools::check_man()
library(rworkflows)
?rworkflows::use_workflow
devtools::check_man()
library(rworkflows)
?rworkflows::use_workflow
? pkgdown::build_site_github_pages
pkgdown::check_pkgdown()
