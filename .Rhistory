## Don't overwrite Authors if it already exists AND
## the user-provided value is the default template.
if(d$has_fields("Authors") &&
vals==construct_authors()){
messager('Keeping existing Authors field.',v=verbose)
} else {
messager("Updating",f,"-->",paste(vals,collapse = ","),v=verbose)
d$set_authors(authors = vals)
}
} else {
messager("Updating",f,"-->",paste(vals,collapse = ", "),v=verbose)
d$set_list(key = f,
list_value = vals)
}
}
}
}
vals
vals
vals <- field_list[[f]]
vals
field_list
f
devtools::check_man()
library(rworkflows)
#### Get example DESCRIPTION file ####
url <- "https://github.com/neurogenomics/templateR/raw/master/DESCRIPTION"
path <- tempfile(fileext = "DESCRIPTION")
utils::download.file(url,path)
#### Fill out DESCRIPTION file ####
d <- fill_description(
path = path,
package = "MyPackageName",
title = "This Package Does Awesome Stuff",
description = paste(
"MyPackageName does several awesome things.",
"Describe thing1.",
"Describe thing2.",
"Describe thing3."
),
github_owner = "OwnerName",
biocviews = c("Genetics", "SystemsBiology"))
library(rworkflows)
d <- get_description(refs="neurogenomics/rworkflows")
d
#### Get example DESCRIPTION file ####
url <- "https://github.com/neurogenomics/templateR/raw/master/DESCRIPTION"
path <- tempfile(fileext = "DESCRIPTION")
utils::download.file(url,path)
#### Fill out DESCRIPTION file ####
d <- fill_description(
path = path,
package = "MyPackageName",
title = "This Package Does Awesome Stuff",
description = paste(
"MyPackageName does several awesome things.",
"Describe thing1.",
"Describe thing2.",
"Describe thing3."
),
github_owner = "OwnerName",
biocviews = c("Genetics", "SystemsBiology"))
devtools::document()
library(rworkflows)
#### Get example DESCRIPTION file ####
url <- "https://github.com/neurogenomics/templateR/raw/master/DESCRIPTION"
path <- tempfile(fileext = "DESCRIPTION")
utils::download.file(url,path)
#### Fill out DESCRIPTION file ####
d <- fill_description(
path = path,
package = "MyPackageName",
title = "This Package Does Awesome Stuff",
description = paste(
"MyPackageName does several awesome things.",
"Describe thing1.",
"Describe thing2.",
"Describe thing3."
),
github_owner = "OwnerName",
biocviews = c("Genetics", "SystemsBiology"))
d
hex_url <- get_hex(refs=c("neurogenomics/rworkflows",
"neurogenomics/echolocatoR"))
devoptera::args2vars(get_hex)
refs=c("neurogenomics/rworkflows",
"neurogenomics/echolocatoR")
if(!is.null(refs)) {
messager("Finding hex sticker(s) for",
formatC(length(refs),big.mark = ","),"package(s).",v=verbose)
}
if(isTRUE(hex_path)){
hex_path <- "inst/hex/hex.png"
}
dl <- get_description(refs = refs,
paths = paths)
refs
paths
if(!is.null(refs)){
if(length((paths))!=length(refs)){
messager("When refs is provided, paths must have the same length",
"(or be set to NULL).","Setting paths=NULL.",v=verbose)
paths <- NULL
}
}
if(isTRUE(hex_path)){
hex_path <- "inst/hex/hex.png"
}
dl <- get_description(refs = refs,
paths = paths)
paths
#### Method 1 ####
dl1 <- get_description_manual(refs=refs,
paths=paths,
cache_dir=cache_dir,
force_new=force_new,
use_wd=use_wd,
verbose=verbose)
source("~/Desktop/rworkflows/R/get_description_manual.R", echo=TRUE)
#### Method 1 ####
dl1 <- get_description_manual(refs=refs,
paths=paths,
cache_dir=cache_dir,
force_new=force_new,
use_wd=use_wd,
verbose=verbose)
dl1
dl <- get_description(refs = refs,
paths = paths)
dl
dl$`neurogenomics/rworkflows`
hex_url <- get_hex(refs=c("neurogenomics/rworkflows",
"neurogenomics/echolocatoR"))
source("~/Desktop/rworkflows/R/get_hex.R", echo=TRUE)
hex_url <- get_hex(refs=c("neurogenomics/rworkflows",
"neurogenomics/echolocatoR"))
hex_url
d <- get_description(refs="neurogenomics/rworkflows")
devtools::document()
library(rworkflows)
d <- get_description(refs="neurogenomics/rworkflows")
d
d1 <- get_description(refs="neurogenomics/rworkflows")
d2 <- get_description(refs="neurogenomics/rworkflows",
paths=here::here("typo","DESCRIPTION"))
d3 <- get_description(refs="neurogenomics/rworkflows",
paths="typo")
d4 <- get_description(refs="rworkflows",
paths="typo")
d5 <- get_description(refs="typoooo",
paths="typo")
d6 <- get_description(refs=NULL,
paths="typo")
scKirby::source_all()
d6 <- get_description(refs=NULL,
paths="typo")
d6
source("~/Desktop/rworkflows/R/get_description_manual.R", echo=TRUE)
devoptera::args2vars(get_description_repo, reassign = TRUE)
db <- lapply(stats::setNames(repo,repo), function(x){
BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressWarnings()
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
BiocPkgTools::biocPkgList()
suppressWarnings(BiocPkgTools::biocPkgList())
suppressMessages(BiocPkgTools::biocPkgList())
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
tempfile(fileext = "x,")
tempfile(fileext = "x,")
tempfile(fileext = "x,")
tempfile(fileext = "x,")
tempfile(fileext = "x,")
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
tmp <- file.path(tempdir(),"BiocPkgTools",x,".csv")
if(file.exists(tmp)){
db_i <- data.table::fread(tmp)
} else {
db_i <- BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
data.table::fwrite(db_i, file = tmp)
}
return(db_i)
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
tmp_dir <- file.path(tempdir(),"BiocPkgTools")
tmp_dir <- file.path(tempdir(),"BiocPkgTools")
dir.create(tmp_dir,showWarnings = FALSE, recursive = TRUE)
#### Import each database ####
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
tmp <- file.path(tmp_dir,x,".csv")
if(file.exists(tmp)){
db_i <- data.table::fread(tmp)
} else {
db_i <- BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
data.table::fwrite(db_i, file = tmp)
}
return(db_i)
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
#### Import each database ####
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
tmp <- file.path(tmp_dir,paste0(x,".csv"))
if(file.exists(tmp)){
db_i <- data.table::fread(tmp)
} else {
db_i <- BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
data.table::fwrite(db_i, file = tmp)
}
return(db_i)
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
#### Import each database ####
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
tmp <- file.path(tmp_dir,paste0(x,".csv"))
if(file.exists(tmp)){
db_i <- data.table::fread(tmp)
} else {
db_i <- BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
data.table::fwrite(db_i, file = tmp)
}
return(db_i)
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
#### Import each database ####
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
tmp <- file.path(tmp_dir,paste0(x,".tsv"))
if(file.exists(tmp)){
db_i <- data.table::fread(tmp)
} else {
db_i <- BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
data.table::fwrite(db_i, file = tmp)
}
return(db_i)
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
#### Import each database ####
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
tmp <- file.path(tmp_dir,paste0(x,".tsv"))
if(file.exists(tmp)){
db_i <- data.table::fread(tmp)
} else {
db_i <- BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
data.table::fwrite(db_i, file = tmp)
}
return(db_i)
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
#### Import each database ####
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
tmp <- file.path(tmp_dir,paste0(x,".rds"))
if(file.exists(tmp)){
db_i <- readRDS(tmp)
} else {
db_i <- BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
saveRDS(db_i, tmp)
}
return(db_i)
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
if(!is.null(refs)) db <- db[Package %in% basename(refs),]
#### Import each database ####
db <- lapply(stats::setNames(repo,repo), function(x){
messager("Importing database:",x,v=verbose)
tmp <- file.path(tmp_dir,paste0(x,".rds"))
if(file.exists(tmp)){
db_i <- readRDS(tmp)
} else {
db_i <- BiocPkgTools::biocPkgList(repo=x,
version = version) |>
suppressMessages()
saveRDS(db_i, tmp)
}
return(db_i)
}) |> data.table::rbindlist(fill = TRUE, use.names = TRUE, idcol = "r_repo")
db
source("~/Desktop/rworkflows/R/get_description_repo.R", echo=TRUE)
d6 <- get_description(refs=NULL,
paths="typo")
d7 <- get_description(refs=NULL,
paths=here::here("DESCRIPTION"))
testthat::expect_equal(d2,d1)
testthat::expect_equal(d3,d1)
testthat::expect_equal(d4,d1)
testthat::expect_null(d5)
d5
testthat::expect_equal(d2,d1)
testthat::expect_equal(d3,d1)
testthat::expect_equal(d4,d1)
d1
d4
testthat::expect_equal(d4,d1)
testthat::expect_equal(d3,d1)
testthat::expect_equal(d4,d1)
testthat::expect_equal(d2,d1)
testthat::expect_equal(d3,d1)
testthat::expect_equal(d4,d1)
testthat::expect_equal(d4[[1]],d1[[1]])
testthat::expect_null(d5[[1]])
testthat::expect_null(d6)
testthat::expect_null(d6[[1]])
testthat::expect_equal(d7,d1)
d7
d1
d7
dl1
d1
d7
d=d7
dl=d7
names(dl)
if(any(is.null(names(dl))))
is.null(names(dl))
is.null(letters)
sapply(names(dl),is.null)
lapply(names(dl),is.null)
names(dl)
as.list(names(dl))
lapply(as.list(names(dl)),is.null)
lapply(as.list(names(dl)),is.null)
names(dl)
names(dl[i])
i=1
names(dl[i])
methods:is(dl[[i]],"description")
dl[[i]]
methods::is(dl[[i]],"description"
methods::is(dl[[i]],"description"
methods::is(dl[[i]],"description"
methods::is(dl[[i]],"description")
dl[[i]]$get_field("Package")
source("~/Desktop/rworkflows/R/get_description_check.R", echo=TRUE)
dl1 <- get_description_check(dl = dl1)
#### Method 1 ####
dl1 <- get_description_manual(refs=refs,
paths=paths,
cache_dir=cache_dir,
force_new=force_new,
use_wd=use_wd,
verbose=verbose)
get_description_check(dl = dl)
dl
source("~/Desktop/rworkflows/R/get_description_check.R", echo=TRUE)
get_description_check(dl = dl1)
get_description_check(dl = dl)
names(dl)[i] <- dl[[i]]$get_field("Package")
names(dl)[i] <- dl[[i]]$get_field("Package")
names(dl)
source("~/Desktop/rworkflows/R/get_description_check.R", echo=TRUE)
get_description_check(dl = dl)
dl_out <- c(dl1,dl2)dl1 <- get_description_check(dl = dl1)
source("~/Desktop/rworkflows/R/get_description.R", echo=TRUE)
d3 <- get_description(refs="neurogenomics/rworkflows",
paths="typo")
d4 <- get_description(refs="rworkflows",
paths="typo")
d5 <- get_description(refs="typoooo",
paths="typo")
d6 <- get_description(refs=NULL,
paths="typo")
d7 <- get_description(refs=NULL,
paths=here::here("DESCRIPTION"))
d1 <- get_description(refs="neurogenomics/rworkflows")
d2 <- get_description(refs="neurogenomics/rworkflows",
paths=here::here("typo","DESCRIPTION"))
d3 <- get_description(refs="neurogenomics/rworkflows",
paths="typo")
d4 <- get_description(refs="rworkflows",
paths="typo")
d5 <- get_description(refs="typoooo",
paths="typo")
d6 <- get_description(refs=NULL,
paths="typo")
d7 <- get_description(refs=NULL,
paths=here::here("DESCRIPTION"))
testthat::expect_equal(d2,d1)
testthat::expect_equal(d3,d1)
testthat::expect_equal(d4[[1]],d1[[1]])
testthat::expect_null(d5[[1]])
testthat::expect_null(d6)
d6
testthat::expect_null(d6[[1]])
testthat::expect_equal(d7,d1)
scKirby::source_all()
d7 <- get_description(refs=NULL,
paths=here::here("DESCRIPTION"))
d7[1]
source("~/Desktop/rworkflows/R/get_description.R", echo=TRUE)
d7 <- get_description(refs=NULL,
paths=here::here("DESCRIPTION"))
testthat::expect_equal(d7,d1)
testthat::expect_equal(d3,d1)
testthat::expect_equal(d4[[1]],d1[[1]])
testthat::expect_null(d5[[1]])
testthat::expect_null(d6[[1]])
testthat::expect_null(d7)
testthat::expect_equal(d7,d1)
devtools::document()
devtools::check_man()
library(rworkflows)
source("~/Desktop/rworkflows/R/use_readme.R", echo=TRUE)
path <- use_readme(save_dir = tempdir())
scKirby::source_all()
path <- use_readme(save_dir = tempdir())
source("~/Desktop/rworkflows/R/use_readme.R", echo=TRUE)
testthat::expect_true(file.exists(path[1]))
path <- use_readme(save_dir = tempdir())
devtools::document()
library(rworkflows)
d7 <- get_description(refs=NULL,
paths=here::here("DESCRIPTION"))
d7
d8 <- get_description(refs=c("stats","data.table"),
paths=NULL)
d8 <- get_description(refs=c("stats","data.table","AnnotationDbi"),
paths=NULL)
d8
d8$stats
d8 <- get_description(refs=c("stats","data.table","AnnotationDbi","Seurat"),
paths=NULL)
d8$Seurat
run_tests <- function(dl){
for(i in seq_len(length(dl))){
d <- dl[[i]]
testthat::expect_true(methods::is(d,"description"))
testthat::expect_equal(basename(names(dl)[i]),
d$Package)
}
}
run_tests(d1)
d1 <- get_description(refs="neurogenomics/rworkflows")
d2 <- get_description(refs="neurogenomics/rworkflows",
paths=here::here("typo","DESCRIPTION"))
d3 <- get_description(refs="neurogenomics/rworkflows",
paths="typo")
d4 <- get_description(refs="rworkflows",
paths="typo")
d5 <- get_description(refs="typoooo",
paths="typo")
d6 <- get_description(refs=NULL,
paths="typo")
d7 <- get_description(refs=NULL,
paths=here::here("DESCRIPTION"))
d8 <- get_description(refs=c("stats","data.table","AnnotationDbi","Seurat"),
paths=NULL)
run_tests(d1)
d1
run_tests <- function(dl){
for(i in seq_len(length(dl))){
d <- dl[[i]]
testthat::expect_true(methods::is(d,"description"))
testthat::expect_equal(basename(names(dl)[i]),
d$get_field("Package"))
}
}
run_tests(d1)
run_tests(d1)run_tests(d1)
run_tests(d5)
run_tests(d4)
run_tests(d3)
run_tests(d2)
run_tests(d1)
library(rworkflows)
hex1 <- get_hex(refs="neurogenomics/rworkflows")
hex2 <- get_hex(refs="rworkflows")
hex3 <- get_hex(refs=NULL,
paths=here::here("DESCRIPTION"))
NULL[[1]]
testthat::expect_equal(hex2, hex1)
testthat::expect_equal(hex2$rworkflows,
hex1$`neurogenomics/rworkflows`)
testthat::expect_null(hex3[[1]])
hex3 <- get_hex(refs=NULL,
paths=here::here("DESCRIPTION"))
scKirby::source_all()
hex3 <- get_hex(refs=NULL,
paths=here::here("DESCRIPTION"))
source("~/Desktop/rworkflows/R/get_hex.R", echo=TRUE)
hex1 <- get_hex(refs="neurogenomics/rworkflows")
hex2 <- get_hex(refs="rworkflows")
hex3 <- get_hex(refs=NULL,
paths=here::here("DESCRIPTION"))
hex3
testthat::expect_null(hex3[[1]])
testthat::expect_null(hex3[[1]],
hex1[[1]])
hex1[[1]]
hex3[[1]]
testthat::expect_equal(hex3[[1]],
hex1[[1]])
hex4 <- get_hex(refs=NULL,
paths=NULL)
hex4
source("~/Desktop/rworkflows/R/get_hex.R", echo=TRUE)
