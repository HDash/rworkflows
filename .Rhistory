message(cat(action$runs$steps[[1]]$run))
capture.output(message(cat(action$runs$steps[[1]]$run)))
#### Read in action to avoid code redundancy ####
## Import the latest version of action.yml
action <- yaml::read_yaml(
"https://github.com/neurogenomics/rworkflows/raw/master/action.yml")
message(cat(action$runs$steps[[1]]$run))
action$runs$steps[[1]]$run
cat(action$runs$steps[[1]]$run)
capture.output(cat(action$runs$steps[[1]]$run))
action$runs$steps[[2]]$run
#### Add action steps to static workflow ####
# action$runs$steps[[1]]$run <- capture.output(cat(action$runs$steps[[1]]$run))
yml$jobs$rworkflows_static$steps <- action$runs$steps
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
yml <- fill_yaml(yml=yml,
## action-level args
name=name,
tag=tag,
on=on,
branches=branches,
runners=runners,
## workflow-level args
run_bioccheck=run_bioccheck,
run_rcmdcheck=run_rcmdcheck,
as_cran=as_cran,
run_vignettes=run_vignettes,
has_testthat=has_testthat,
run_covr=run_covr,
run_pkgdown=run_pkgdown,
has_runit=has_runit,
has_latex=has_latex,
run_docker=run_docker,
github_token=github_token,
docker_user=docker_user,
docker_org=docker_org,
docker_token=docker_token,
cache_version=cache_version,
enable_act=enable_act)
cat(yaml::as.yaml(yml))
dir.create(dirname(path),showWarnings = FALSE, recursive = TRUE)
messager("Saving workflow ==>",path,v=verbose)
path="~/Downloads/yaml.yml"
dir.create(dirname(path),showWarnings = FALSE, recursive = TRUE)
messager("Saving workflow ==>",path,v=verbose)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml),
handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path)
devtools::document()
library(rworkflows)
use_workflow(name = "rworkflows_static",run_pkgdown = F, force_new = T)
sessionInfo()
devoptera::args2vars(use_workflow);  docker_org <- eval(docker_org)
name="rworkflows_static"
#### Check for existing yaml ####
path <- file.path(save_dir,paste0(name,".yml"))
if(file.exists(path) &&
isFALSE(force_new)){
messager("Using existing workflow file:",path,v=verbose)
yml <- yaml::read_yaml(path)
#### Preview ####
if(isTRUE(preview)){
cat(yaml::as.yaml(yml))
}
#### Return ####
if(isTRUE(return_path)){
return(path)
} else {
return(yml)
}
}
## Custom handler prevents "on" from being converted to TRUE
yml <- get_yaml(name = name)
yml <- fill_yaml(yml=yml,
## action-level args
name=name,
tag=tag,
on=on,
branches=branches,
runners=runners,
## workflow-level args
run_bioccheck=run_bioccheck,
run_rcmdcheck=run_rcmdcheck,
as_cran=as_cran,
run_vignettes=run_vignettes,
has_testthat=has_testthat,
run_covr=run_covr,
run_pkgdown=run_pkgdown,
has_runit=has_runit,
has_latex=has_latex,
run_docker=run_docker,
github_token=github_token,
docker_user=docker_user,
docker_org=docker_org,
docker_token=docker_token,
cache_version=cache_version,
enable_act=enable_act)
#### Preview ####
if(isTRUE(preview)){
cat(yaml::as.yaml(yml))
}
cat(yaml::as.yaml(yml))
path="~/Downloads/yaml.yml"
yml <- yaml::read_yaml(
system.file("templates","rworkflows_template_static.yml",
package = "rworkflows"),
handlers = handlers)
#### Read in action to avoid code redundancy ####
## Import the latest version of action.yml
action <- yaml::read_yaml(
"https://github.com/neurogenomics/rworkflows/raw/master/action.yml")
action
use_workflow(name = "rworkflows_static",run_pkgdown = F, force_new = T)
#### Read in action to avoid code redundancy ####
## Import the latest version of action.yml
action <- yaml::read_yaml(
"https://github.com/neurogenomics/rworkflows/raw/master/action.yml")
action$runs$steps
#### Add action steps to static workflow ####
action$runs$steps[[1]]$run
#### Add action steps to static workflow ####
gsub("inputs\\.","env.",action$runs$steps[[1]]$run)
library(rworkflows)
library(rworkflows)
use_workflow(name = "rworkflows_static", run_pkgdown = F,force_new = T)
#### Read in action to avoid code redundancy ####
## Import the latest version of action.yml
action <- yaml::read_yaml(
"https://github.com/neurogenomics/rworkflows/raw/master/action.yml")
length(action$steps)
action$steps
length(action$runs$steps)
step=action$runs$steps[1]
step=action$runs$steps[[1]]
step
lapply(action$runs$steps,function(step){
lapply(step, function(x){
gsub("inputs\\.","env.",x)
})
})
library(rworkflows)
use_workflow(name = "rworkflows_static", run_pkgdown = F,force_new = T)
library(rworkflows)
use_workflow(name = "rworkflows_static", run_pkgdown = F,force_new = T)
#### Read in action to avoid code redundancy ####
## Import the latest version of action.yml
action <- yaml::read_yaml(
"https://github.com/neurogenomics/rworkflows/raw/master/action.yml")
library(rworkflows)
#### Read in action to avoid code redundancy ####
## Import the latest version of action.yml
action <- yaml::read_yaml(
"https://github.com/neurogenomics/rworkflows/raw/master/action.yml")
#### Add action steps to static workflow ####
yml$jobs$rworkflows_static$steps <-
lapply(action$runs$steps,function(step){
lapply(step, function(x){
## Get args from 'env.' (for workflows)
## instead of 'inputs.' (for actions)
if(is.list(x)){
lapply(x,gsub,pattern = "inputs\\.",replacement = "env.")
} else {
gsub("inputs\\.","env.",x)
}
})
})
lapply(action$runs$steps,function(step){
lapply(step, function(x){
## Get args from 'env.' (for workflows)
## instead of 'inputs.' (for actions)
if(is.list(x)){
lapply(x,gsub,pattern = "inputs\\.",replacement = "env.")
} else {
gsub("inputs\\.","env.",x)
}
})
})
library(rworkflows)
use_workflow(name = "rworkflows_static", run_pkgdown = F,force_new = T)
usethis::use_test()
.Platform$OS.type
usethis::use_test()
usethis::use_test()
is.character(TRUE)
#### Add action steps to static workflow ####
recurse <- function(x,
fun=function(x){
gsub("inputs\\.","env.",x)
}){
if(is.list(x)){
recurse(x = x,
fun = fun)
} else {
fun(x)
}
}
#### Add action steps to static workflow ####
recurse <- function(x,
fun=function(x){
gsub("inputs\\.","env.",x)
}){
if(is.list(x)){
recurse(x = x,
fun = fun)
} else if(is.character(x)){
fun(x)
} else {
x
}
}
#### Read in action to avoid code redundancy ####
## Import the latest version of action.yml
action <- yaml::read_yaml(
"https://github.com/neurogenomics/rworkflows/raw/master/action.yml")
recurse(action$runs$steps)
#### Add action steps to static workflow ####
recurse <- function(x,
fun=function(x){
gsub("inputs\\.","env.",x)
}){
if(is.list(x)){
lapply(x, recurse, fun=fun)
} else if(is.character(x)){
fun(x)
} else {
x
}
}
recurse(action$runs$steps)
library(rworkflows)
use_workflow(name = "rworkflows_static", run_pkgdown = F,force_new = T)
usethis::use_test()
biocviews2 <- infer_biocviews(include_branch = FALSE)
testthat::expect_null(biocviews2)
testthat::expect_equal("WorkflowManagement")
testthat::expect_equal(biocviews2,"WorkflowManagement")
biocviews_manual = c("Software","Genetics","Transcriptomics")
biocviews_manual = c("Software","Genetics","Transcriptomics")
biocviews3 <- infer_biocviews(biocviews = biocviews_manual)
testthat::expect_equal(biocviews3,biocviews_manual)
biocviews_manual
biocviews_manual = c("Software","Genetics","Transcriptomics")
testthat::expect_equal(biocviews3,c(biocviews_manual,"WorkflowManagement"))
#### Errors ####
testthat::expect_error(
infer_biocviews(branch = "typo")
)
testthat::expect_error(
infer_biocviews(type = "typo")
)
devtools::document()
library(rworkflows)
biocviews2 <- infer_biocviews(include_branch = FALSE)
biocviews2
testthat::is_testing()
devtools::document()
library(rworkflows)
/rlang::checkd
?rlang::check_dots_empty0
devtools::document()
library(rworkflows)
usethis::gh_token_help()
BiocManager::install("biocthis")
gh::gh_token()
usethis::create_github_token()
usethis::create_github_token()
?usethis::create_github_token()
usethis::create_github_token
?bibentry()
library(rworkflows)
devtools::build_manual(path="inst")
library(rworkflows)
utils::citation(pkg)$textVersion
utils::citation()
utils::citation("rworkflows")
testthat::expect_length(badges,1)
testthat::expect_type(badges,"character")
run_tests <- function(badges){
testthat::expect_length(badges,1)
testthat::expect_type(badges,"character")
}
badges <- use_badges(ref = "neurogenomics/rworkflows",
add_hex = TRUE,
add_actions = "rworkflow",
add_doi = "doi:000000",
add_lifecycle = "experimental",
add_github_version = TRUE,
add_commit = TRUE,
add_code_size = TRUE,
add_codecov = TRUE,
add_codecov_graphs = TRUE,
add_license = TRUE,
add_authors = TRUE,
add_cran_release = TRUE,
add_cran_checks = TRUE,
add_cran_download_month = TRUE,
add_cran_download_total = TRUE
)
run_tests(badges)
#### Explicitly specify package ####
badges3 <- use_badges(ref = "BiocManager",
add_hex = FALSE,
add_bioc_release = TRUE,
add_bioc_download_month = TRUE,
add_bioc_download_total = TRUE,
add_bioc_download_rank = TRUE,
## These only work if you have the DESCRIPTION file
## or a proper ref in the format owner/repo
add_github_version = FALSE,
add_license = FALSE,
add_authors = FALSE,
as_list = TRUE)
#### Explicitly specify package ####
badges3 <- use_badges(ref = "stats",
add_hex = FALSE,
add_bioc_release = TRUE,
add_bioc_download_month = TRUE,
add_bioc_download_total = TRUE,
add_bioc_download_rank = TRUE,
## These only work if you have the DESCRIPTION file
## or a proper ref in the format owner/repo
add_github_version = FALSE,
add_license = FALSE,
add_authors = FALSE,
as_list = TRUE)
BiocManager
#### Explicitly specify package ####
badges3 <- use_badges(ref = "BiocManager",
add_hex = FALSE,
add_bioc_release = TRUE,
add_bioc_download_month = TRUE,
add_bioc_download_total = TRUE,
add_bioc_download_rank = TRUE,
## These only work if you have the DESCRIPTION file
## or a proper ref in the format owner/repo
add_github_version = FALSE,
add_license = FALSE,
add_authors = FALSE,
as_list = TRUE)
testthat::expect_gte(length(badges3),8)
badges3
rvcheck::check_cran("BiocManager")
devtools::build_manual(path = "inst")
d=data.frame(x=seq(0,100,5),y=-seq(0,100,5))
d
d=data.frame(x=seq(0,100,5),y=seq(0,1,.1))
d=data.frame(x=seq(0,100,5),y=seq(0,1,length.out=.1))
d
d=data.frame(x=seq(0,100,length.out=20),y=seq(0,1,length.out=10))
s
d
library(ggplot2)
d
d=data.frame(x=seq(0,100,length.out=20),
y=seq(0,1,length.out=10))
ggplot(d,aes(x=x,y=y)) +
geom_point()
d=data.frame(x=seq(0,100,length.out=20),
y=sort(seq(0,1,length.out=10)))
ggplot(d,aes(x=x,y=y)) +
geom_point()
sort(seq(0,1,length.out=10))
seq(0,1,length.out=10)
seq(0,100,length.out=20)
d=data.frame(x=factor(seq(0,100,length.out=20)),
y=seq(0,1,length.out=10))
ggplot(d,aes(x=x,y=y)) +
geom_point()
ggplot(d,aes(x=x,y=y)) +
geom_point() +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
d
d=data.frame(x=seq(0,100,length.out=20),
y=seq(0,1,length.out=20))
ggplot(d,aes(x=x,y=y)) +
geom_point() +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
d=data.frame(x=seq(0,100,length.out=20),
y=log(seq(0,1,length.out=20)))
ggplot(d,aes(x=x,y=y)) +
geom_point() +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
d=data.frame(x=seq(0,100,length.out=20),
y=log(seq(1,0,length.out=20)))
ggplot(d,aes(x=x,y=y)) +
geom_point() +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
ggplot(d,aes(x=x,y=y)) +
geom_point() +
geom_hline(yintercept = .9) +
geom_hline(yintercept = .6) +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
d=data.frame(x=seq(0,100,length.out=20),
y=scales::rescale(log(seq(1,0,length.out=20)),c(0,1)))
ggplot(d,aes(x=x,y=y)) +
geom_point() +
geom_hline(yintercept = .9) +
geom_hline(yintercept = .6) +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
ggplot(d,aes(x=x,y=y)) +
geom_point() +
geom_hline(yintercept = .9) +
geom_hline(yintercept = .6) +
geom_smooth() +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
ggplot(d,aes(x=x,y=y)) +
geom_smooth() +
geom_point() +
geom_hline(yintercept = .9, color="red") +
geom_hline(yintercept = .6 ,color="green") +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
ggplot(d,aes(x=x,y=y)) +
geom_smooth() +
geom_point() +
geom_hline(yintercept = .9, color="red") +
geom_hline(yintercept = .6 ,color="orange") +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
ggplot(d,aes(x=x,y=y)) +
geom_smooth() +
geom_point() +
geom_hline(yintercept = .9, color="red") +
geom_hline(yintercept = .6 ,color="orange", label="f") +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
ggplot(d,aes(x=x,y=y)) +
geom_smooth() +
geom_point() +
geom_hline(yintercept = .9, color="red") +
geom_hline(yintercept = .6 ,color="orange") +
annotate(x=5, y = .9, geom = "text", label="HRC") +
annotate(x=5, y = .66, geom = "text", label="UKB") +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
ggplot(d,aes(x=x,y=y)) +
geom_smooth() +
geom_point() +
geom_hline(yintercept = .9, color="red") +
geom_hline(yintercept = .66 ,color="orange") +
annotate(x=5, y = .9*.9, geom = "text", label="HRC") +
annotate(x=5, y = .66*.9, geom = "text", label="UKB") +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
ggplot(d,aes(x=x,y=y)) +
geom_smooth() +
geom_point() +
geom_hline(yintercept = .9, color="red") +
geom_hline(yintercept = .66 ,color="orange") +
annotate(x=5, y = .9*.95, geom = "text", label="HRC", color="red") +
annotate(x=5, y = .66*.95, geom = "text", label="UKB", color="orange") +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
ggplot(d,aes(x=x,y=y)) +
geom_smooth() +
geom_point() +
geom_hline(yintercept = .9, color="red") +
geom_hline(yintercept = .66 ,color="orange") +
annotate(x=5, y = .9*.95, geom = "text", label="HRC", color="red") +
annotate(x=5, y = .66*.95, geom = "text", label="UKB", color="orange") +
labs(x="% in-sample population",
y="Concordence") +
theme_bw()
d=data.frame(x=seq(100,0,length.out=20),
y=scales::rescale(log(seq(1,0,length.out=20)),c(0,1)))
ggplot(d,aes(x=x,y=y)) +
geom_smooth() +
geom_point() +
geom_hline(yintercept = .9, color="red") +
geom_hline(yintercept = .66 ,color="orange") +
annotate(x=5, y = .9*.95, geom = "text", label="HRC", color="red") +
annotate(x=5, y = .66*.95, geom = "text", label="UKB", color="orange") +
labs(x="% in-sample population",
y="Concordence") +
theme_bw()
d=data.frame(x=seq(0,100,length.out=20),
y=scales::rescale(log(seq(1,0,length.out=20)),c(0,1)))
ggplot(d,aes(x=x,y=y)) +
geom_smooth() +
geom_point() +
geom_hline(yintercept = .9, color="red") +
geom_hline(yintercept = .66 ,color="orange") +
annotate(x=5, y = .9*.95, geom = "text", label="HRC", color="red") +
annotate(x=5, y = .66*.95, geom = "text", label="UKB", color="orange") +
labs(x="% in-sample degradation",
y="Concordence") +
theme_bw()
