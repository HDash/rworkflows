r = r,
cont = cont,
rspm = rspm,
python_version = python_version)
os
o=os[1]
#### Check args ####
args <- construct_runners_check_args(os = os,
bioc = bioc,
r = r,
cont = cont,
rspm = rspm,
python_version = python_version)
if(isTRUE(versions_explicit)){
info <- bioc_r_versions(bioc_version = args$bioc[[o]])
} else {
info <- list(bioc=check_bioc_version(bioc = args$bioc[[o]]),
r=check_r_version(r = args$r[[o]])
)
}
#### Check container settings ####
if(isTRUE(run_check_cont)){
args$cont[[o]] <- check_cont(cont=args$cont[[o]],
verbose=verbose)
}
#### Construct new list ####
l <- list(os = o,
bioc = info$bioc,
r = info$r,
cont = args$cont[[o]],
rspm = args$rspm[[o]]
)
#### Check python settings ####
python_version <- if(!is.null(args$python_version[[o]])){
l[["python-version"]] <- gha_python_versions(
python_version=args$python_version[[o]]
)
}
#### Set runners ####
runners <- lapply(os, function(o){
if(isTRUE(versions_explicit)){
info <- bioc_r_versions(bioc_version = args$bioc[[o]])
} else {
info <- list(bioc=check_bioc_version(bioc = args$bioc[[o]]),
r=check_r_version(r = args$r[[o]])
)
}
#### Check container settings ####
if(isTRUE(run_check_cont)){
args$cont[[o]] <- check_cont(cont=args$cont[[o]],
verbose=verbose)
}
#### Construct new list ####
l <- list(os = o,
bioc = info$bioc,
r = info$r,
cont = args$cont[[o]],
rspm = args$rspm[[o]]
)
#### Check python settings ####
python_version <- if(!is.null(args$python_version[[o]])){
l[["python-version"]] <- gha_python_versions(
python_version=args$python_version[[o]]
)
}
return(l)
})
l
#### Set runners ####
runners <- lapply(os, function(o){
if(isTRUE(versions_explicit)){
info <- bioc_r_versions(bioc_version = args$bioc[[o]])
} else {
info <- list(bioc=check_bioc_version(bioc = args$bioc[[o]]),
r=check_r_version(r = args$r[[o]])
)
}
#### Check container settings ####
if(isTRUE(run_check_cont)){
args$cont[[o]] <- check_cont(cont=args$cont[[o]],
verbose=verbose)
}
#### Construct new list ####
l <- list(os = o,
bioc = info$bioc,
r = info$r,
cont = args$cont[[o]],
rspm = args$rspm[[o]]
)
#### Check python settings ####
if(!is.null(args$python_version[[o]])){
l[["python-version"]] <- gha_python_versions(
python_version=args$python_version[[o]]
)
}
return(l)
})
l
os
remove)o
remove(o)
#### Set runners ####
runners <- lapply(os, function(o){
if(isTRUE(versions_explicit)){
info <- bioc_r_versions(bioc_version = args$bioc[[o]])
} else {
info <- list(bioc=check_bioc_version(bioc = args$bioc[[o]]),
r=check_r_version(r = args$r[[o]])
)
}
#### Check container settings ####
if(isTRUE(run_check_cont)){
args$cont[[o]] <- check_cont(cont=args$cont[[o]],
verbose=verbose)
}
#### Construct new list ####
l <- list(os = o,
bioc = info$bioc,
r = info$r,
cont = args$cont[[o]],
rspm = args$rspm[[o]]
)
#### Check python settings ####
if(!is.null(args$python_version[[o]])){
l[["python-version"]] <- gha_python_versions(
python_version=args$python_version[[o]]
)
}
return(l)
})
runners
for(r in runners){
}
r
is.null(r$`python-version`)
r[["erger"]]
devtools::check_man()
library(rworkflows)
workflow <- rworkflows::use_workflow(runners = construct_runners(python_version = "3.10"),
environment_file = environment_file,
## Use default save_dir in practice
save_dir = tempdir())
devoptera::args2vars(gha_python_versions)
#### Download versions path ####
versions_url <- paste0(
"https://raw.githubusercontent.com/actions/python-versions/",
"main/versions-manifest.json")
versions_path <- file.path(cache_dir,basename(versions_url))
if(!file.exists(versions_path)){
dir.create(cache_dir, showWarnings = FALSE, recursive = TRUE)
utils::download.file(url = versions_url, destfile = versions_path)
}
### Read yaml ####
yml <- yaml::read_yaml(versions_path)
#### Check python_version ####
if(!is.null(python_version)){
python_version <- as.character(python_version)
#### Get all versions (minor and major) ####
versions <- sapply(yml, function(x){x$version})
versions_major <- unique(sapply(strsplit(versions,'\\.'),
function(x)paste(x[1],x[2],sep="."))
)
versions_x <- unique(sapply(strsplit(versions,'\\.'),
function(x)paste(x[1],"x",sep="."))
)
versions_opts <- c(versions,versions_major,versions_x)
#### Get devel version ####
if(python_version %in% c("devel","dev")){
if(isTRUE(versions_explicit)){
python_version <- versions[sapply(yml, function(x){x$stable==FALSE})][1]
} else {
python_version <- "devel"
}
#### Get release version ####
} else if (python_version %in% c("latest","release")){
if(isTRUE(versions_explicit)){
python_version <- versions[sapply(yml, function(x){x$stable==TRUE})][1]
} else {
python_version <- "latest"
}
#### Get specific version ####
} else if(python_version=="3"){
python_version <- "3.x"
}else {
if(!python_version %in% versions_opts){
stopper(paste0("python_version=",shQuote(python_version),
"is not available.",
"Must be one of:",
paste("\n - ",shQuote(versions_opts),collapse = "")))
}
}
return(python_version)
#### Or return entire yaml with all version info ####
} else {
return(yml)
}
python_version="3.10"
python_version <- as.character(python_version)
#### Get all versions (minor and major) ####
versions <- sapply(yml, function(x){x$version})
versions_major <- unique(sapply(strsplit(versions,'\\.'),
function(x)paste(x[1],x[2],sep="."))
)
versions_x <- unique(sapply(strsplit(versions,'\\.'),
function(x)paste(x[1],"x",sep="."))
)
versions_opts <- c(versions,versions_major,versions_x)
#### Get devel version ####
if(python_version %in% c("devel","dev")){
if(isTRUE(versions_explicit)){
python_version <- versions[sapply(yml, function(x){x$stable==FALSE})][1]
} else {
python_version <- "devel"
}
#### Get release version ####
} else if (python_version %in% c("latest","release")){
if(isTRUE(versions_explicit)){
python_version <- versions[sapply(yml, function(x){x$stable==TRUE})][1]
} else {
python_version <- "latest"
}
#### Get specific version ####
} else if(python_version=="3"){
python_version <- "3.x"
}else {
if(!python_version %in% versions_opts){
stopper(paste0("python_version=",shQuote(python_version),
"is not available.",
"Must be one of:",
paste("\n - ",shQuote(versions_opts),collapse = "")))
}
}
return(python_version)
python_version
versions
environment_file <- construct_conda_yml(name = "myenv",
channels = c("conda-forge",
"bioconda"),
dependencies = c("python>=3.7",
"scanpy",
"anndata"),
pip = c("scarches",
"magic-impute"),
preview = TRUE)
workflow <- rworkflows::use_workflow(runners = rworkflows::construct_runners(python_version = "3.10.11"),
environment_file = environment_file,
## Use default save_dir in practice
save_dir = tempdir())
source("~/Desktop/rworkflows/R/gha_python_versions.R", echo=TRUE)
devtools::check_man()
library(rworkflows)
environment_file2 <- "https://github.com/RajLabMSSM/echoconda/raw/main/inst/conda/scanpy.yml"
workflow <- rworkflows::use_workflow(runners = rworkflows::construct_runners(python_version = "3.10.11"),
environment_file = environment_file,
## Use default save_dir in practice
save_dir = tempdir())
runners <- rworkflows::construct_runners(
python_version = list("ubuntu-latest"="3.10.11",
"macOS-latest"="3.9",
"windows-latest"="3.9"))
workflow <- rworkflows::use_workflow(runners = runners,
## Use default save_dir in practice
save_dir = tempdir())
runners
library(rworkflows)
runners <- rworkflows::construct_runners(
python_version = list("ubuntu-latest"="3.10.11",
"macOS-latest"="3.9",
"windows-latest"="3.9.1"))
workflow <- rworkflows::use_workflow(runners = runners,
## Use default save_dir in practice
save_dir = tempdir())
func="use_workflows"
func="use_workflow"
formals(get(func))
eval(formals(get(func))[[arg]])
formals(get(func))
formals(get(func))[["tinytex_version"]]
n=NULL
get(n)
get("n")
NULL==NULL
library(rworkflows)
is.null(NULL,NULL)
is.null(c(NULL,NULL))
c(NULL,NULL)
library(rworkflows)
runners <- rworkflows::construct_runners(
python_version = list("ubuntu-latest"="3.10.11",
"macOS-latest"="3.9",
"windows-latest"="3.9.1"))
workflow <- rworkflows::use_workflow(runners = runners,
## Use default save_dir in practice
save_dir = tempdir())
workflow <- rworkflows::use_workflow(runners = runners,
preview = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
library(rworkflows)
library(rworkflows)
runners <- rworkflows::construct_runners(
python_version = list("ubuntu-latest"="3.10.11",
"macOS-latest"="3.9",
"windows-latest"="3.9.1"))
workflow <- rworkflows::use_workflow(runners = runners,
preview = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
devtools::check_man()
devtools::check_man()
library(rworkflows)
devtools::check_man()
library(rworkflows)
environment_file <- construct_conda_yml(name = "myenv",
channels = c("conda-forge",
"bioconda"),
dependencies = c("python>=3.7",
"scanpy",
"anndata"),
pip = c("scarches",
"magic-impute"),
preview = TRUE)
workflow <- rworkflows::use_workflow(environment_file = environment_file,
## Use default save_dir in practice
save_dir = tempdir())
library(rworkflows)
workflow <- rworkflows::use_workflow(environment_file = environment_file,
## Use default save_dir in practice
save_dir = tempdir())
"/Users/bms20/Desktop/rworkflows/myenv_conda.yml"==NULL
any("/Users/bms20/Desktop/rworkflows/myenv_conda.yml"==NULL)
library(rworkflows)
workflow <- rworkflows::use_workflow(environment_file = environment_file,
## Use default save_dir in practice
save_dir = tempdir())
workflow <- rworkflows::use_workflow(environment_file = environment_file,
preview = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
get()
a
a=""
get(a)
get("a")
any(""==NULL)
any(""==FALSE)
library(rworkflows)
runners <- rworkflows::construct_runners(
python_version = list("ubuntu-latest"="3.10.11",
"macOS-latest"="3.9",
"windows-latest"="3.9.1"))
workflow <- rworkflows::use_workflow(runners = runners,
preview = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
environment_file2 <- "https://github.com/RajLabMSSM/echoconda/raw/main/inst/conda/scanpy.yml"
workflow <- rworkflows::use_workflow(environment_file = environment_file,
preview = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
workflow <- rworkflows::use_workflow(environment_file = environment_file,
preview = TRUE,
force_new = T,
## Use default save_dir in practice
save_dir = tempdir())
library(rworkflows)
workflow <- rworkflows::use_workflow(environment_file = environment_file,
preview = TRUE,
force_new = T,
## Use default save_dir in practice
save_dir = tempdir())
library(rworkflows)
environment_file2 <- "https://github.com/RajLabMSSM/echoconda/raw/main/inst/conda/scanpy.yml"
workflow <- rworkflows::use_workflow(environment_file = environment_file,
preview = TRUE,
force_new = T,
## Use default save_dir in practice
save_dir = tempdir())
environment_file <- "https://github.com/RajLabMSSM/echoconda/raw/main/inst/conda/scanpy.yml"
workflow <- rworkflows::use_workflow(environment_file = environment_file,
preview = TRUE,
force_new = T,
## Use default save_dir in practice
save_dir = tempdir())
?parent.frame
library(rworkflows)
workflow <- rworkflows::use_workflow(environment_file = environment_file,
preview = TRUE,
force_new = T,
## Use default save_dir in practice
save_dir = tempdir())
parent.frame(-1)
parent.frame(1)
parent.frame(2)
devtools::check_man()
library(rworkflows)
workflow <- rworkflows::use_workflow(environment_file = environment_file,
preview = TRUE,
force_new = T,
## Use default save_dir in practice
save_dir = tempdir())
devtools::check_man()
library(rworkflows)
runners <- rworkflows::construct_runners(
python_version = list("ubuntu-latest"="3.10.11",
"macOS-latest"="3.9",
"windows-latest"="3.9.1"))
workflow <- rworkflows::use_workflow(runners = runners,
preview = TRUE,
force_new = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
all(NULL==NULL)
NULL==NULL
NULL==""
all(NULL=="")
any(NULL=="")
library(rworkflows)
runners <- rworkflows::construct_runners(
python_version = list("ubuntu-latest"="3.10.11",
"macOS-latest"="3.9",
"windows-latest"="3.9.1"))
workflow <- rworkflows::use_workflow(runners = runners,
preview = TRUE,
force_new = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
environment_file <- "https://github.com/RajLabMSSM/echoconda/raw/main/inst/conda/scanpy.yml"
workflow <- rworkflows::use_workflow(environment_file = environment_file,
preview = TRUE,
force_new = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
all(NULL=="")
any(NULL=="")
library(rworkflows)
workflow <- rworkflows::use_workflow(environment_file = environment_file,
preview = TRUE,
force_new = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
runners <- rworkflows::construct_runners(
python_version = list("ubuntu-latest"="3.10.11",
"macOS-latest"="3.9",
"windows-latest"="3.9.1"))
workflow <- rworkflows::use_workflow(runners = runners,
preview = TRUE,
force_new = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
library(rworkflows)
runners <- rworkflows::construct_runners(
python_version = list("ubuntu-latest"="3.10.11",
"macOS-latest"="3.9",
"windows-latest"="3.9.1"))
workflow <- rworkflows::use_workflow(runners = runners,
preview = TRUE,
force_new = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
workflow <- rworkflows::use_workflow(environment_file = environment_file,
preview = TRUE,
force_new = TRUE,
## Use default save_dir in practice
save_dir = tempdir())
library(rworkflows)
devtools::check_man()
library(rworkflows)
usethis::use_test()
path <- use_workflow(save_dir = file.path(tempdir(),".github","workflows"))
testthat::expect_true(file.exists(path))
#### Non-defaults ###
args <- list(has_latex = TRUE,
run_bioccheck = TRUE,
run_vignettes = FALSE,
run_docker = TRUE,
docker_user = "octocat",
docker_org = "octolab")
yml <- use_workflow(has_latex = args$has_latex,
run_bioccheck = args$run_bioccheck,
run_vignettes = args$run_vignettes,
run_docker = args$run_docker,
docker_user = args$docker_user,
docker_org = args$docker_org,
force_new = TRUE,
return_path = FALSE,
save_dir = tempdir())
with <- yml$jobs$rworkflows$steps[[1]]$with
for(x in names(args)){
testthat::expect_equal(
if(with[[x]]=="${{ true }}") TRUE else if (with[[x]]=="${{ false }}") FALSE else with[[x]],
args[[x]])
}
#### Load pre-existing yaml ####
yml2 <- use_workflow(force_new = FALSE,
return_path = FALSE,
save_dir = tempdir())
testthat::expect_equal(yml,yml2)
#### Use rworkflows_static ####
yml3 <- use_workflow(template = "rworkflows_static",
return_path = FALSE,
force_new = TRUE,
tinytex_installer = "TinyTeX",
save_dir = tempdir())
devtools::check_man()
library(rworkflows)
library(rworkflows)
?check_miniconda_args
?use_workflow
install.packages("devtooles")
install.packages("devtools")
install.packages("devtools")
