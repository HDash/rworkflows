`quit-with-status` = TRUE,
`no-check-R-ver` = TRUE,
`no-check-vignettes` = no_check_vignettes,
`no-check-CRAN` = as_cran,
`no-check-bioc-help` = as_cran)
BiocCheck::BiocCheck(
`quit-with-status` = TRUE,
`no-check-R-ver` = TRUE,
`no-check-vignettes` = no_check_vignettes,
`no-check-CRAN` = as_cran,
`no-check-bioc-help` = as_cran)
BiocCheck::BiocCheck(
`quit-with-status` = TRUE,
`no-check-R-ver` = TRUE,
`no-check-CRAN` = T,
`no-check-bioc-help` = T)
usethis::use_test()
d2 <- get_description(ref="neurogenomics/rworkflows",
path=here::here("typo/DESCRIPTION"))
devtools::document()
library(rworkflows)
d2 <- get_description(ref="neurogenomics/rworkflows",
path=here::here("typo/DESCRIPTION"))
d2
d1 <- get_description(ref="neurogenomics/rworkflows")
d2 <- get_description(ref="neurogenomics/rworkflows",
path=here::here("typo","DESCRIPTION"))
d3 <- get_description(ref="neurogenomics/rworkflows",
path="typo")
d4 <- get_description(ref="typoooo",
path="typo")
d4
d5 <- get_description(ref=NULL,
path="typo")
d5
testthat::expect_equal(d1,d2)
testthat::expect_equal(d1,d2)
testthat::expect_equal(d1,d3)
d4 <- get_description(ref="rworkflows",
path="typo")
d4
utils::packageDescription(basename("rworkflows"))
ref="rworkflows"
d4 <- get_description(ref="rworkflows",
path="typo")
s4
d4
source("~/Desktop/rworkflows/R/get_description.R", echo=TRUE)
d4 <- get_description(ref="rworkflows",
path="typo")
library(rworkflows)
d4 <- get_description(ref="rworkflows",
path="typo")
d4
d1 <- get_description(ref="neurogenomics/rworkflows")
d2 <- get_description(ref="neurogenomics/rworkflows",
path=here::here("typo","DESCRIPTION"))
d3 <- get_description(ref="neurogenomics/rworkflows",
path="typo")
d4 <- get_description(ref="rworkflows",
path="typo")
d4 <- get_description(ref="typoooo",
path="typo")
d5 <- get_description(ref=NULL,
path="typo")
d4
d4 <- get_description(ref="rworkflows",
path="typo")
d5 <- get_description(ref="typoooo",
path="typo")
d6 <- get_description(ref=NULL,
path="typo")
testthat::expect_null(d5)
testthat::expect_null(d6)
d2
d4
as(d4,"description")
desc::desc(d4)
d3 <- get_description(ref="neurogenomics/rworkflows",
path="typo")
desc::desc(d4)
as.list(d4)
desc::desc(as.list(d4))
is(d4)
is(d3)
?utils::packageDescription()
desc::desc(text = d4)
as.character(d4)
desc::desc(text = as.character(d4))
as(d4,"list")
names(d4)
as(d4,"list") |> `names<-`(names(d4))
l <- as(d4,"list") |> `names<-`(names(d4))
desc::desc(l)
desc::cran_valid_fields
as.character(l)
desc::desc(as.character(l))
?read.dcf
read.dcf(l)
## Create a reduced version of the DESCRIPTION file in package 'splines'
x <- read.dcf(file = system.file("DESCRIPTION", package = "splines"),
fields = c("Package", "Version", "Title"))
x
is(x)
/glue::
desc::desc(package = "rworkflows")
desc::desc(package = "reger")
desc::desc("reger")
try_desc <- function(package){
tryCatch({
desc::desc(package = package)
}, error=function(e){message(e); NULL})
}
try_desc("rege")
desc::desc("utils")
desc::desc(package = "utils")
library(rworkflows)
d1 <- get_description(ref="neurogenomics/rworkflows")
d2 <- get_description(ref="neurogenomics/rworkflows",
path=here::here("typo","DESCRIPTION"))
d3 <- get_description(ref="neurogenomics/rworkflows",
path="typo")
d4 <- get_description(ref="rworkflows",
path="typo")
d5 <- get_description(ref="typoooo",
path="typo")
d6 <- get_description(ref=NULL,
path="typo")
d4
d5 <- get_description(ref="typoooo",
path="typo")
d6 <- get_description(ref=NULL,
path="typo")
testthat::expect_equal(d1,d2)
testthat::expect_equal(d1,d3)
testthat::expect_equal(d1,d4)
testthat::expect_null(d5)
testthat::expect_null(d6)
usethis::use_test()
desc::desc_fields()
desc::cran_valid_fields
grep("bioc",desc::cran_valid_fields,)
grep("bioc",desc::cran_valid_fields,value = T)
ref="rworkflows"
d <- get_description(ref = ref)
desc::desc_fields(d)
names(desc)
names(d)
desc::desc_has_fields(keys = "URL", file = d)
d$has_fields(keys = "URL")
d$desc_get_field(key = "URL")
d$get_field(key = "URL")
devtools::document()
library(rworkflows)
devtools::check_man()
devtools::check_man()
hex_url <- get_hex(ref="neurogenomics/rworkflows")
hex_url
hex1 <- get_hex(ref="neurogenomics/rworkflows")
usethis::use_test()
usethis::use_test()
library(rworkflows)
hex2 <- get_hex(ref="rworkflows")
hex1 <- get_hex(ref="neurogenomics/rworkflows")
hex2
hex1
testthat::expect_equal(hex1, hex2)
hex3 <- get_hex(ref=NULL)
hex3
d6 <- get_description(ref=NULL,
path=here::here("typo","DESCRIPTION"))
d7 <- get_description(ref=NULL,
path=here::here("DESCRIPTION"))
testthat::expect_equal(d1,d7)
testthat::expect_equal(hex1, hex3)
devtools::document()
devtools::check_man()
library(rworkflows)
usethis::use_test()
####
runners <- construct_runners(versions_explicit = TRUE)
runners
testthat::expect_length(runners,3)
for (r in runners){
testthat::expect_true(all(c("os","bioc","r") %in% names(r)))
}
run_tests <- function(runners){
testthat::expect_length(runners,3)
for (r in runners){
testthat::expect_true(all(c("os","bioc","r") %in% names(r)))
}
}
run_tests(runners = runners)
runners <- construct_runners()
runners
runners[[1]]
runners[[1]]$bioc!="devel"
as.numeric(runners[[1]]$bioc)
#### versions_explicit ####
runners <- construct_runners(versions_explicit = TRUE)
runners[[1]]$r
as.numeric(runners[[1]]$r)
packageVersion(runners[[1]]$r)
package_version(runners[[1]]$r)
package_version(runners[[1]]$r)>="4.3"
runners[[1]]$bioc
testthat::expect_true(
package_version(runners[[1]]$bioc)>="3.17"
)
runners
devtools::document()
library(rworkflows)
usethis::use_test()
#### Conflicting inputs ####
testthat::expect_error(
deps <- infer_deps(imports = "markdown",
suggests = "markdown")
)
#### Return just one output ####
deps2 <- infer_deps(which = "Imports")
deps2
is.list(deps2)
methods::is(deps2)
methods::is(deps2,"list")
devtools::document()
library(rworkflows)
usethis::use_test()
usethis::use_test()
usethis::use_test()
library(rworkflows)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
use_workflow(name = "rworkflows_static", run_bioccheck = T,force_new = T)
paste("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/sunburst.svg",
if(is.null(token)){paste0("?token=",token)} else {NULL}
)
ref="neurogenomics/rworkflows";
branch="master"
token=NULL
# ref="neurogenomics/rworkflows";
# branch="master"
# token=NULL
paste("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/sunburst.svg",
if(is.null(token)){paste0("?token=",token)} else {NULL}
)
# ref="neurogenomics/rworkflows";
# branch="master"
# token=NULL
paste0("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/sunburst.svg",
if(is.null(token)){paste0("?token=",token)} else {NULL}
)
# ref="neurogenomics/rworkflows";
# branch="master"
# token=NULL
paste0("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/sunburst.svg",
if(!is.null(token)){paste0("?token=",token)} else {NULL}
)
# ref="neurogenomics/rworkflows";
# branch="master"
# token=NULL
paste0("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/",types,".svg",
if(!is.null(token)){paste0("?token=",token)} else {NULL}
)
types=c("sunburst","tree","icicle")
# ref="neurogenomics/rworkflows";
# branch="master"
# token=NULL
paste0("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/",types,".svg",
if(!is.null(token)){paste0("?token=",token)} else {NULL}
)
source("~/Desktop/rworkflows/R/codecov_graphs.R", echo=TRUE)
rep(T,3)
isFALSE(rep(T,3))
isFALSE(types)
isTRUE(types)
source("~/Desktop/rworkflows/R/codecov_graphs.R", echo=TRUE)
eval(formals(codecov_graphs)$types)
source("~/Desktop/rworkflows/R/codecov_graphs.R", echo=TRUE)
#### Make SVG link(s) ####
lapply(stats::setNames(types,types), function(ty){
paste0("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/",ty,".svg",
if(!is.null(token)){paste0("?token=",token)} else {NULL}
)
})
source("~/Desktop/rworkflows/R/codecov_graphs.R", echo=TRUE)
devtools::check_man()
usethis::use_test()
library(rworkflows)
# ref="neurogenomics/rworkflows";
# branch="master"
templateR:::args2vars(codecov_graphs)
ref="neurogenomics/rworkflows";branch="master"
#### Get graph types ###
if(isTRUE(types)){
types <- eval(formals(codecov_graphs)$types)
}
#### Make SVG link(s) ####
lapply(stats::setNames(types,types), function(ty){
paste0("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/",ty,".svg",
if(!is.null(token)){paste0("?token=",token)} else {NULL}
)
})
ty=types[1]
URL <- paste0("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/",ty,".svg",
if(!is.null(token)){paste0("?token=",token)} else {NULL}
)
ty
URL <- paste0("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/",ty,".svg",
if(!is.null(token)){paste0("?token=",token)} else {NULL}
)
height=200
paste("<img src=",shQuote(URL),
"height=",height,
">")
paste0("<img src=",shQuote(URL),
"height=",height,
">")
paste0("<img src=",shQuote(URL),
" height=",height,
">")
paste0("<img src=",shQuote(URL),
" height=",shQuote(height),
">")
devtools::document()
library(rworkflows)
devtools::document()
library(rworkflows)
link <- paste0(
"https://app.codecov.io/gh/",ref,"/tree/",branch
)
library(rworkflows)
library(rworkflows)
templateR:::args2vars(codecov_graphs)
ref="neurogenomics/rworkflows";branch="master"
#### Get graph types ###
if(isTRUE(types)){
types <- eval(formals(codecov_graphs)$types)
}
#### Make SVG link(s) ####
lapply(stats::setNames(types,types), function(ty){
URL <- paste0("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/",ty,".svg",
if(!is.null(token)){paste0("?token=",token)} else {NULL}
)
if(isTRUE(add_html)){
link <- paste0(
"https://app.codecov.io/gh/",ref,"/tree/",branch
)
paste0(
"<a href=",shQuote(link),">",
" <img src=",shQuote(URL),
" height=",shQuote(height),
# " style='valign: top;'",
">",
"</a>"
)
} else {
URL
}
})
paste0(
"<a href=",shQuote(link),">",
" <img src=",shQuote(URL),
" height=",shQuote(height),
" style='valign: top;'",
">",
"</a>"
)
#### Make SVG link(s) ####
lapply(stats::setNames(types,types), function(ty){
URL <- paste0("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/",ty,".svg",
if(!is.null(token)){paste0("?token=",token)} else {NULL}
)
if(isTRUE(add_html)){
link <- paste0(
"https://app.codecov.io/gh/",ref,"/tree/",branch
)
paste0(
"<a href=",shQuote(link),">",
" <img src=",shQuote(URL),
" height=",shQuote(height),
" style='valign: top;'",
">",
"</a>"
)
} else {
URL
}
})
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
devtools::document()
library(rworkflows)
templateR:::args2vars(codecov_graphs)
ref="neurogenomics/rworkflows";branch="master"; token="7KXI8F7BJJ"
#### Get graph types ###
if(isTRUE(types)){
types <- eval(formals(codecov_graphs)$types)
}
#### Make SVG link(s) ####
lapply(stats::setNames(types,types), function(ty){
URL <- paste0("https://codecov.io/gh/",
ref,
"/branch/",branch,
"/graphs/",ty,".svg",
if(!is.null(token)){paste0("?token=",token)} else {NULL}
)
if(isTRUE(add_html)){
link <- paste0(
"https://app.codecov.io/gh/",ref,"/tree/",branch
)
paste0(
"<a href=",shQuote(link)," target='_blank'>",
"<img src=",shQuote(URL),
" height=",shQuote(height),
" style=",shQuote(style),
">",
"</a>"
)
} else {
URL
}
})
library(rworkflows)
library(rworkflows)
token=NULL
devtools::document()
library(rworkflows)
devtools::document()
library(rworkflows)
devtools::document()
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
library(rworkflows)
devtools::document()
library(rworkflows)
