new(Class = desc::description)
new(Class = "desc::description")
?new(Class = "desc::description",... = )
initialize()
initialize(desc::description)
desc::desc_validate(initialize(desc::description))
?biocthis::use_bioc_description()
?biocthis::use_bioc_description
biocthis::use_bioc_description
usethis::use_description_defaults(basename(usethis::proj_get())\
usethis::use_description_defaults(basename(usethis::proj_get())
usethis::use_description_defaults(basename(usethis::proj_get()
usethis::use_description_defaults(basename(usethis::proj_get()))
usethis::use_description_defaults()
url <- "https://github.com/neurogenomics/templateR/raw/master/DESCRIPTION"
path <- tempfile(pattern = "DESCRIPTION")
utils::download.file(url,path)
d <- fill_description(
package = "MyPackageName",
title = "This Package Does Awesome Stuff",
description = paste(
"MyPackageName does several awesome things.",
"Describe thing1.",
"Describe thing2.",
"Describe thing3."
),
github_owner = "OwnerName")
d
testthat::expect_true(methods::is(d,"description"))
d$fields()
paste(shQuote(d$fields()),collapse = ", ")
paste(shQuote(d$fields()),collapse = ",")
f <- c('Package','Type','Title','Version','Authors@R',
'Description','URL','BugReports','Encoding','Depends',
'biocViews','Imports','Suggests','RoxygenNote',
'VignetteBuilder','License','Config/testthat/edition')
testthat::expect_true(all(f %in% d$fields()))
devtools::check_man()
?fill_description
is.null(NA
)
?desc::desc_set_list()
devtools::document()
library(rworkflows)
usethis::use_test()
url <- "https://github.com/neurogenomics/templateR/raw/master/DESCRIPTION"
path <- tempfile(pattern = "DESCRIPTION")
utils::download.file(url,path)
d <- fill_description(
package = "MyPackageName",
title = "This Package Does Awesome Stuff",
description = paste(
"MyPackageName does several awesome things.",
"Describe thing1.",
"Describe thing2.",
"Describe thing3."
),
github_owner = "OwnerName")
d <- fill_description(
package = "MyPackageName",
title = "This Package Does Awesome Stuff",
description = paste(
"MyPackageName does several awesome things.",
"Describe thing1.",
"Describe thing2.",
"Describe thing3."
),
github_owner = NA)
d
testthat::expect_true(methods::is(d,"description"))
f <- c('Package','Type','Title','Version','Authors@R',
'Description','URL','BugReports','Encoding','Depends',
'biocViews','Imports','Suggests','RoxygenNote',
'VignetteBuilder','License','Config/testthat/edition')
testthat::expect_true(all(f %in% d$fields()))
devtools::document()
library(rworkflows)
d <- fill_description(
package = "MyPackageName",
title = "This Package Does Awesome Stuff",
description = paste(
"MyPackageName does several awesome things.",
"Describe thing1.",
"Describe thing2.",
"Describe thing3."
),
github_owner = "OwnerName",
suggests = NA)
library(rworkflows)
url <- "https://github.com/neurogenomics/templateR/raw/master/DESCRIPTION"
path <- tempfile(pattern = "DESCRIPTION")
utils::download.file(url,path)
d <- fill_description(
package = "MyPackageName",
title = "This Package Does Awesome Stuff",
description = paste(
"MyPackageName does several awesome things.",
"Describe thing1.",
"Describe thing2.",
"Describe thing3."
),
github_owner = "OwnerName",
suggests = NA)
testthat::expect_true(methods::is(d,"description"))
f <- c('Package','Type','Title','Version','Authors@R',
'Description','URL','BugReports','Encoding','Depends',
'biocViews','Imports','Suggests','RoxygenNote',
'VignetteBuilder','License','Config/testthat/edition')
testthat::expect_true(all(f %in% d$fields()))
f <- f[f!="Suggests"]
testthat::expect_true(all(f %in% d$fields()))
d <- fill_description(
package = "MyPackageName",
title = "This Package Does Awesome Stuff",
description = paste(
"MyPackageName does several awesome things.",
"Describe thing1.",
"Describe thing2.",
"Describe thing3."
),
github_owner = "OwnerName",
suggests = NA)
testthat::expect_true(methods::is(d,"description"))
f <- c('Package','Type','Title','Version','Authors@R',
'Description','URL','BugReports','Encoding','Depends',
'biocViews','Imports','RoxygenNote',
'VignetteBuilder','License','Config/testthat/edition')
testthat::expect_true(all(f %in% d$fields()))
testthat::expect_true(!"Suggests" %in% d$fields())
devtools::document()
library(rworkflows)
?fill_description
?renv::dependencies()
deps <- renv::dependencies(path = here::here())
deps
deps$Package
suggests_thresh = 1
deps <- renv::dependencies(path = path)
counts <- table(deps$Package)
counts
counts <- sort(table(deps$Package))
counts
counts <- sort(table(deps$Package), decreasing = TRUE)
counts
imports_thresh = 1
imports_inferred <- names(counts)[count>imports_thresh]
imports_inferred <- names(counts)[counts>imports_thresh]
imports_inferred
imports_final <- unique(c(imports,imports_inferred))
templateR:::args2vars(infer_deps)
# templateR:::args2vars(infer_deps)
deps <- renv::dependencies(path = path)
counts <- sort(table(deps$Package), decreasing = TRUE)
imports_inferred <- names(counts)[counts>imports_thresh]
imports_final <- unique(c(imports,imports_inferred))
#' rule and are instead automatically assigned as Imports.
#' @param suggests R packages that are exempt from the \code{suggests_thresh}
#' rule and are instead automatically assigned as Suggests.
#' @inheritParams renv::dependencies
#' @returns A character vector of R package names.
#'
#' @export
#' @importFrom renv dependencies
#' @examples
#' deps <- infer_deps()
infer_deps <- function(path = here::here(),
which = c("Imports","Suggests"),
imports_thresh = 1,
imports = NULL,
suggests = c("testthat","rmarkdown","markdown",
"knitr","remotes","knitr","covr")){
# templateR:::args2vars(infer_deps)
deps <- renv::dependencies(path = path)
counts <- sort(table(deps$Package), decreasing = TRUE)
imports_inferred <- names(counts)[counts>imports_thresh]
imports_final <- unique(c(imports,imports_inferred))
}
imports_inferred <- names(counts)[counts>imports_thresh]
imports_final <- unique(c(imports,imports_inferred))
imports
templateR:::args2vars(infer_deps)
imports
# templateR:::args2vars(infer_deps)
deps <- renv::dependencies(path = path)
counts <- sort(table(deps$Package), decreasing = TRUE)
imports_inferred <- names(counts)[counts>imports_thresh]
imports_final <- unique(c(imports,imports_inferred))
imports_final
imports_inferred <- unique(c(names(counts)[counts>imports_thresh],
imports))
imports_inferred
names(counts)[!names(counts) %in% imports_inferred]
overlap <- intersect(imports, suggests)
overlap
#### Check for packages that appear in multiple fields ####
overlap <- intersect(imports, suggests)
if(length(overlap)>0){
stp <- paste(
"R packages cannot be in both Imports and Suggests",
"Please ensure the following packages only appear",
"in one of the two fields:",
paste("\n - ",shQuote(overlap))
)
stop(stp)
}
#### Get Suggests ####
suggests_inferred <- unique(
c(names(counts)[!names(counts) %in% imports_inferred],
suggests
)
)
suggests_inferred
#### Search for deps ####
deps <- subset(renv::dependencies(path = path), package!="R")
#### Search for deps ####
deps <- subset(renv::dependencies(path = path), Package!="R")
deps
#### Get Imports ####
imports_inferred <- unique(
c(names(counts)[counts>imports_thresh],
imports)
)
imports_inferred
#### Get Suggests ####
suggests_inferred <- unique(
c(names(counts)[!names(counts) %in% imports_inferred],
suggests
)
)
suggests_inferred
counts <- sort(table(deps$Package), decreasing = TRUE)
counts
#### Get Imports ####
imports_inferred <- unique(
c(names(counts)[counts>=imports_thresh],
imports)
)
#### Get Suggests ####
suggests_inferred <- unique(
c(names(counts)[!names(counts) %in% imports_inferred],
suggests
)
)
suggests_inferred
#### Get Imports ####
imports_all <- unique(
c(names(counts)[counts>=imports_thresh],
imports)
)
#### Get Suggests ####
suggests_all<- unique(
c(names(counts)[!names(counts) %in% imports_inferred],
suggests
)
)
#### Return ####
pkgs <- list(Imports=imports_all,
Suggests=suggests_all)
pkgs
pkgs[which]
pkgs[[which]]
source("~/Desktop/rworkflows/R/infer_deps.R", echo=TRUE)
?
renv::dependencies
source("~/Desktop/rworkflows/R/infer_deps.R", echo=TRUE)
deps <- infer_deps()
deps
source("~/Desktop/rworkflows/R/infer_deps.R", echo=TRUE)
deps <- infer_deps()
deps
deps
#### Search for deps ####
dat <- renv::dependencies(path = path,
progress = progress,
errors = errors,
dev = dev)
templateR:::args2vars(infer_deps)
#### Check for packages that appear in multiple fields ####
overlap <- intersect(imports, suggests)
if(length(overlap)>0){
stp <- paste(
"R packages cannot be in both Imports and Suggests",
"Please ensure the following packages only appear",
"in one of the two fields:",
paste("\n - ",shQuote(overlap))
)
stop(stp)
}
#### Search for deps ####
dat <- renv::dependencies(path = path,
progress = progress,
errors = errors,
dev = dev)
dat <- subset(dat, Package!="R") ## Remove "R"
counts <- sort(table(dat$Package), decreasing = TRUE)
dat
devtools::dev_package_deps()
d=devtools::dev_package_deps()
d
d
?devtools::dev_package_deps()
devtools::dev_package_deps(pkgdir = ".")
usethis::use_test()
deps <- infer_deps()
deps
paste(shQuote(deps$Imports),collapse = ",")
imports <- c(
'utils','rworkflows','here','BiocStyle','yaml','stats','desc','badger',
'biocViews','data.table','renv','shiny'
)
paste(shQuote(deps$Suggests),collapse = ",")
suggests <- c(
'testthat','rmarkdown','remotes','covr','echodeps','hexSticker',
'htmltools','igraph','knitr','magick','markdown','methods'
)
testthat::expect_true(all(suggests %in% deps$Suggests))
infer_deps(which = "Imports")
infer_deps(which = "Suggests")
devtools::document()
devtools::check_man()
devtools::check_man()
devtools::check_man()
library(rworkflows)
?biocViews::recommendBiocViews
usethis::use_test()
devtools::document()
library(rworkflows)
?usethis::use_description()
devtools::document()
library(rworkflows)
infer_deps("~/Downloads/")
?testthat::dir
?testthat::source_dir()
?testthat::test_dir()
list.files("../../")
devtools::document()
library(rworkflows)
devtools::document()
library(rworkflows)
is.na(c(1,2))
is.null(c(1,2))
usethis::use_test()
library(rworkflows)
rprojroot::is_testthat
templateR:::args2vars(infer_deps)
#### Search for deps ####
dat <- renv::dependencies(path = path,
progress = progress,
errors = errors,
dev = dev)
dat
grep("DESCRIPTION$",dat$Source, value = TRUE)[1]
pkg <- grep("DESCRIPTION$",dat$Source, value = TRUE)[1]
description <- grep("DESCRIPTION$",dat$Source, value = TRUE)[1]
dfile <- grep("DESCRIPTION$",dat$Source, value = TRUE)[1]
source("~/Desktop/rworkflows/R/infer_deps.R", echo=TRUE)
dfile
dirname(dfile)
pkg <- basename(dirname(dfile))
pkg
devtools::document()
library(rworkflows)
templateR:::args2vars(infer_deps)
#### Search for deps ####
dat <- renv::dependencies(path = path,
progress = progress,
errors = errors,
dev = dev)
## Remove "R"
dat <- subset(dat, Package!="R")
dfile <- grep("DESCRIPTION$",dat$Source, value = TRUE)[1]
dfile
desc::desc(dfile)
pkg <- desc::desc(dfile)$get_package()
pkg <- desc::desc(dfile)
pkg$get_field(key = "Package")
pkg <- desc::desc(dfile)$get_field(key = "Package")
pkg
pkg
devtools::document()
library(rworkflows)
deps <- infer_deps()
imports <- c(
'utils','here','BiocStyle','yaml','stats','desc','badger',
'biocViews','data.table','renv','shiny','htmltools'
)
suggests <- c(
'testthat','rmarkdown','remotes','covr','echodeps',
'igraph','knitr','markdown','methods'
)
testthat::expect_equal(sort(imports),
sort(deps$Imports))
testthat::expect_equal(sort(suggests),
sort(deps$Suggests))
library(rworkflows)
?desc
library(rworkflows)
library(rworkflows)
library(rworkflows)
devtools::document()
library(rworkflows)
library(rworkflows)
deps <- infer_deps()
imports <- c(
'utils','here','BiocStyle','yaml','stats','desc','badger',
'biocViews','data.table','renv','shiny','htmltools'
)
suggests <- c(
'testthat','rmarkdown','remotes','covr','echodeps','hexSticker',
'igraph','knitr','markdown','methods'
)
testthat::expect_equal(sort(imports),
sort(deps$Imports))
testthat::expect_equal(sort(suggests),
sort(deps$Suggests))
suggests <- c(
'testthat','rmarkdown','remotes','covr','echodeps',
'igraph','knitr','markdown','methods'
)
testthat::expect_equal(sort(imports),
sort(deps$Imports))
testthat::expect_equal(sort(suggests),
sort(deps$Suggests))
deps <- infer_deps()
imports <- c(
'utils','here','BiocStyle','yaml','stats','desc','badger',
'biocViews','data.table','renv','shiny','htmltools'
)
suggests <- c(
'testthat','rmarkdown','remotes','covr','echodeps',
'igraph','knitr','markdown','methods'
)
testthat::expect_equal(sort(imports),
sort(deps$Imports))
testthat::expect_equal(sort(suggests),
sort(deps$Suggests))
devtools::check_man()
library(rworkflows)
library(rworkflows)
devtools::document()
library(rworkflows)
library(rworkflows)
library(rworkflows)
list.dirs(path = file.path("..","..","^R$")
list.files("../")
list.files("../R^")
list.files("../R$")
list.files("R$")
getwd
getwd()
list.dirs()
file.path("..","..")
list.dirs(path = file.path("..",".."))
list.dirs()
list.dirs("../")
f <- list.files(path = file.path("..",".."), pattern = "^R$")
f
f <- list.files( pattern = "^R$")
d
f
path <- list.files(path = file.path("..",".."), pattern = "^R$", full.names = TRUE)[[1]] |>
normalizePath(mustWork = FALSE)
list.files(path = file.path("..",".."), pattern = "^R$", full.names = TRUE)
path <- list.files(path = file.path("..",".."), pattern = "^R$", full.names = TRUE)[1] |>
normalizePath(mustWork = FALSE)
library(rworkflows)
library(rworkflows)
?BiocManager::install()
BiocManager::repositories()
?remotes::install_local()
?install.packages
getOption("repos")
install.packages("BiocCheck")
BiocManager::install
devtools::dev_package_deps()
?install.packages(de)
?rworkflows::use_workflow()
rworkflows::use_workflow("rworkflows_static", force_new = T)
rworkflows::use_workflow("rworkflows_static", force_new = T, run_bioccheck = T)
rworkflows::use_workflow("rworkflows_static", force_new = T, run_bioccheck = T)
rworkflows::use_workflow("rworkflows_static", force_new = T, run_bioccheck = T)
library(rworkflows)
rworkflows::use_workflow("rworkflows_static", force_new = T, run_bioccheck = T)
rworkflows::use_workflow("rworkflows_static", force_new = T, run_bioccheck = T)
rworkflows::use_workflow("rworkflows_static", force_new = T, run_bioccheck = T)
rworkflows::use_workflow("rworkflows_static", force_new = T, run_bioccheck = T)
BiocCheck::BiocCheck()
?require(,q)
BiocCheck:::checkNEWS()
BiocCheck:::checkNEWS("/")
BiocCheck:::checkNEWS(".")
library(rworkflows)
no_check_vignettes=T
as_cran=T
BiocCheck::BiocCheck(
dir('check', 'tar.gz$', full.names = TRUE),
`quit-with-status` = TRUE,
`no-check-R-ver` = TRUE,
`no-check-vignettes` = no_check_vignettes,
`no-check-CRAN` = as_cran,
`no-check-bioc-help` = as_cran)
BiocCheck::BiocCheck(
`quit-with-status` = TRUE,
`no-check-R-ver` = TRUE,
`no-check-vignettes` = no_check_vignettes,
`no-check-CRAN` = as_cran,
`no-check-bioc-help` = as_cran)
BiocCheck::BiocCheck(
`quit-with-status` = TRUE,
`no-check-R-ver` = TRUE,
`no-check-CRAN` = T,
`no-check-bioc-help` = T)
