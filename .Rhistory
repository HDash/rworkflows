path_ <- file.path("..",path)
!is.null(ref)
!is.null(try_desc(basename(ref),
verbose = verbose)
!is.null(try_desc(basename(ref),
verbose = verbose))
try_desc(basename(ref),
verbose = verbose)
basename(ref)
d <- desc::desc(package = basename(ref))
iter <- max(length(refs), length(paths))
lapply(stats::setNames(seq_len(iter),
refs),
function(i){
ref <- refs[[i]]
path <- paths[[i]]
wrn <- if(is.null(ref)){
paste("Cannot import DESCRIPTION file:",paths)
} else{
paste("Cannot find DESCRIPTION file for:",ref)
}
path_is_default <- !is.null(path) && path.expand(path)==
path.expand(eval(formals(get_description)$paths))
path_ <- file.path("..",path)
#### Cascade through options ####
#### Search installed packages ####
if (!is.null(ref) &&
!is.null(try_desc(basename(ref),
verbose = verbose)) ){
d <- desc::desc(package = basename(ref))
#### Search in main directory ####
} else if((isTRUE(use_wd) | isTRUE(path_is_default)) &&
!is.null(path) &&
file.exists(path)){
d <- desc::desc(file = path)
#### Search in one directory up directory ####
} else if(isTRUE(use_wd) &&
!is.null(path) &&
file.exists(path_)){
d <- desc::desc(file = path_)
#### Search on GitHub ####
} else if(!is.null(ref) &&
length(strsplit(ref,"/")[[1]])>1){
remotes <- paste0("https://github.com/",ref,"/raw/",
c("main","master","dev"),
"/DESCRIPTION")
remotes <- remotes[url_exists(remotes)]
if(length(remotes)>0){
#### Download DESCRIPTION from GitHub #####
tmp <- file.path(cache_dir,paste0(gsub("/",".",ref),"_DESCRIPTION"))
if(!file.exists(tmp) | isTRUE(force_new)){
dir.create(cache_dir, showWarnings = FALSE, recursive = TRUE)
utils::download.file(remotes[1],tmp, quiet = !verbose)
} else{
messager("Importing cached file:",tmp,v=verbose)
}
d <- desc::desc(file = tmp)
}  else {
#### Give up ####
messager(wrn,v=verbose)
return(NULL)
}
#### Give up ####
} else {
messager(wrn,v=verbose)
return(NULL)
}
#### Check if package in the DESCRIPTION is the one you requested ####
if(!is.null(ref) && d$has_fields("Package")){
pkg_retrieved <- d$get_field("Package")
approximate_match <- check_pkg_name_variants(
ref = ref,
pkg_retrieved = pkg_retrieved,
verbose = verbose && isFALSE(use_wd))
if(isTRUE(approximate_match)){
return(d)
} else {
#### Try again with recursion ####
# d <- get_description_manual(refs=ref,
#                             path=path,
#                             cache_dir=cache_dir,
#                             force_new=force_new,
#                             use_wd=FALSE,
#                             verbose=verbose)
return(NULL)
}
}
return(d)
})
d
#### Cascade through options ####
#### Search installed packages ####
if (!is.null(ref) &&
!is.null(try_desc(basename(ref),
verbose = verbose)) ){
d <- desc::desc(package = basename(ref))
#### Search in main directory ####
} else if((isTRUE(use_wd) | isTRUE(path_is_default)) &&
!is.null(path) &&
file.exists(path)){
d <- desc::desc(file = path)
#### Search in one directory up directory ####
} else if(isTRUE(use_wd) &&
!is.null(path) &&
file.exists(path_)){
d <- desc::desc(file = path_)
#### Search on GitHub ####
} else if(!is.null(ref) &&
length(strsplit(ref,"/")[[1]])>1){
remotes <- paste0("https://github.com/",ref,"/raw/",
c("main","master","dev"),
"/DESCRIPTION")
remotes <- remotes[url_exists(remotes)]
if(length(remotes)>0){
#### Download DESCRIPTION from GitHub #####
tmp <- file.path(cache_dir,paste0(gsub("/",".",ref),"_DESCRIPTION"))
if(!file.exists(tmp) | isTRUE(force_new)){
dir.create(cache_dir, showWarnings = FALSE, recursive = TRUE)
utils::download.file(remotes[1],tmp, quiet = !verbose)
} else{
messager("Importing cached file:",tmp,v=verbose)
}
d <- desc::desc(file = tmp)
}  else {
#### Give up ####
messager(wrn,v=verbose)
return(NULL)
}
#### Give up ####
} else {
messager(wrn,v=verbose)
return(NULL)
}
d
d$has_fields("Package")
pkg_retrieved <- d$get_field("Package")
approximate_match <- check_pkg_name_variants(
ref = ref,
pkg_retrieved = pkg_retrieved,
verbose = verbose && isFALSE(use_wd))
approximate_match
source("~/Desktop/rworkflows/R/check_pkg_name_variants.R", echo=TRUE)
approximate_match <- check_pkg_name_variants(
ref = ref,
pkg_retrieved = pkg_retrieved,
verbose = verbose && isFALSE(use_wd))
approximate_match
hex1 <- get_hex(refs="neurogenomics/rworkflows")
hex2 <- get_hex(refs="rworkflows")
hex3 <- get_hex(refs=NULL,
paths=here::here("DESCRIPTION"))
hex4 <- get_hex(refs=NULL,
paths=NULL)
hex3
hex4
hex4
testthat::expect_equal(hex2$rworkflows,
hex1$`neurogenomics/rworkflows`)
if(is_gha()){
testthat::expect_null(hex3[[1]])
} else {
testthat::expect_equal(hex3[[1]],
hex1[[1]])
}
testthat::expect_warning(
hex4 <- get_hex(refs=NULL,
paths=NULL)
)
testthat::expect_warning(
hex4 <- get_hex(refs=NULL,
paths=NULL)
)
hex4 <- get_hex(refs=NULL,
paths=NULL)
hex4
testthat::expect_null(hex4)
#### Get example DESCRIPTION file ####
d <- get_description(refs="neurogenomics/rworkflows")
tmp <- tempfile(pattern = "DESCRIPTION")
d$del(keys = "URL")
#### Get example DESCRIPTION file ####
d <- get_description(refs="neurogenomics/rworkflows")
d
tmp <- tempfile(pattern = "DESCRIPTION")
d$del(keys = "URL")
#### Get example DESCRIPTION file ####
d <- get_description(refs="neurogenomics/rworkflows")[[1]]
tmp <- tempfile(pattern = "DESCRIPTION")
d$del(keys = "URL")
d$write(tmp)
testthat::expect_warning(
hex5 <- get_hex(ref=NULL,
path=tmp)
)
hex5 <- get_hex(ref=NULL,
path=tmp)
testthat::expect_null(hex5)
hex5 <- get_hex(refs=NULL,
paths=tmp)
testthat::expect_null(hex5)
testthat::expect_null(hex5$rworkflows)
testthat::expect_equal(hex4[[1]],
hex1[[1]])
hex4[[1]]
testthat::expect_equal(hex5[[1]],
hex1[[1]])
hex4 <- get_hex(refs=NULL,
paths=NULL)
hex1 <- get_hex(refs="neurogenomics/rworkflows")
hex2 <- get_hex(refs="rworkflows")
hex3 <- get_hex(refs=NULL,
paths=here::here("DESCRIPTION"))
refs=NULL
if(!is.null(refs)) {
messager("Finding hex sticker(s) for",
formatC(length(refs),big.mark = ","),"package(s).",v=verbose)
}
if(!is.null(refs)){
if(length((paths))!=length(refs)){
messager("When refs is provided, paths must have the same length",
"(or be set to NULL).","Setting paths=NULL.",v=verbose)
paths <- NULL
}
}
if(isTRUE(hex_path)){
hex_path <- "inst/hex/hex.png"
}
scKirby::source_all()
hex1 <- get_hex(refs="neurogenomics/rworkflows")
hex2 <- get_hex(refs="rworkflows")
hex3 <- get_hex(refs=NULL,
paths=here::here("DESCRIPTION"))
hex4 <- get_hex(refs=NULL,
paths=NULL)
testthat::expect_equal(hex2$rworkflows,
hex1$`neurogenomics/rworkflows`)
hex4
hex3
library(rworkflows)
library(rworkflows)
devtools::document()
devtools::check_man()
devtools::build_manual()
library(rworkflows)
#### Create graph ####
res <- dep_graph(pkg = "rworkflows",
method_seed = "github",
reverse = TRUE)
#### Create graph ####
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
reverse = TRUE)
#### Create graph ####
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
save_path = here::here(
"depgraph","rworkflows_depgraph.html")),
#### Create graph ####
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
save_path = here::here(
"depgraph","rworkflows_depgraph.html"),
reverse = TRUE)
saveRDS(res,here::here("reports","depgraph.rds"))
?HPOExplorer::load_phenotype_to_genes()
d=HPOExplorer::load_phenotype_to_genes("phenotype.hpoa")
d$HPO_ID
length(unique(d$HPO_ID))
length(unique(d$HPO_ID))/16000
length(unique(d$DiseaseName))
d
#### Create graph ####
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
save_path = here::here(
"reports","rworkflows_depgraph.html"),
reverse = TRUE)
#### Create graph ####
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
save_path = here::here(
"reports","rworkflows_depgraph.html"),
reverse = TRUE)
res$plot |> visNetwork::visIgraphLayout(layout = "layout_kk")
res$plot |> visNetwork::visIgraphLayout(layout = "layout_with_kk")
#### Create graph ####
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
save_path = here::here("reports",
"rworkflows_depgraph.html"),
reverse = TRUE)
res <- echodeps::dep_graph(pkg = "rworkflows",
method = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
height="100%",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
height="100%",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
```R
saveRDS(res, here::here("reports","dep_graph_res.rds"))
cols <- c("stargazers_count",
"clones_count","clones_uniques","indirect_clones_uniques",
"views_count","views_uniques","indirect_views_uniques",
"total_downloads","indirect_total_downloads",
echogithub::r_repos_opts())
res$report
res$graph
as.data.frame(res$graph)
metadata <- as.data.frame(res$graph)
cols <- c("stargazers_count",
"clones_count","clones_uniques","indirect_clones_uniques",
"views_count","views_uniques","indirect_views_uniques",
"total_downloads","indirect_total_downloads",
echogithub::r_repos_opts())
cols <- cols[cols %in% names(metadata)]
metadata_counts <- data.frame(
total=res$metadata[repo!="rworkflows",
lapply(.SD, sum, na.rm=TRUE),
.SDcols=cols] |> t()
)
metadata_counts <- data.frame(
total=res$metadata[basename(ref)!="rworkflows",
lapply(.SD, sum, na.rm=TRUE),
.SDcols=cols] |> t()
)
metadata <- data.table::as.data.table(res$graph)
cols <- c("stargazers_count",
"clones_count","clones_uniques","indirect_clones_uniques",
"views_count","views_uniques","indirect_views_uniques",
"total_downloads","indirect_total_downloads",
echogithub::r_repos_opts())
cols <- cols[cols %in% names(metadata)]
metadata_counts <- data.frame(
total=res$metadata[basename(ref)!="rworkflows",
lapply(.SD, sum, na.rm=TRUE),
.SDcols=cols] |> t()
)
metadata[basename(ref)!="rworkflows",
lapply(.SD, sum, na.rm=TRUE),
.SDcols=cols]
total=metadata[basename(ref)!="rworkflows",
lapply(.SD, sum, na.rm=TRUE),
.SDcols=cols] |> t()
total
res$report
res <- echodeps::dep_graph(pkg = "rworkflows",
method_seed = "github",
exclude = c("neurogenomics_rworkflows",
"neurogenomics_r_workflows"),
node_size = "total_downloads",
height="100%",
reverse = TRUE,
save_path = here::here("reports","rworkflows_depgraph.html"))
pkgs <- echogithub::r_repos_downloads(which = c("CRAN","Bioc"),
nThread = 10)
pkgs
pkgs <- pkgs[!is.na(downloads),]
data.table::setkeyv(pkgs,c("r_repo","downloads"))
pkgs_top <- pkgs[, tail(.SD, 10), by="r_repo"]
methods::show(pkgs_top)
```
pkgs <- pkgs[!is.na(downloads),]
data.table::setkeyv(pkgs,c("r_repo","downloads"))
pkgs_top <- pkgs[, tail(.SD, 10), by="r_repo"]
methods::show(pkgs_top)
res <- echogithub::r_repos()
res
``` r
repo_stats=r_repos_res
r_repos_res <- echogithub::r_repos(add_downloads = TRUE)
echogithub::r_repos_opts(exclude = "github")
echogithub::r_repos_opts(exclude = "GitHub")
echogithub::r_repos_opts(exclude = c("GitHub","local"))
``` r
r_repos_res <- echogithub::r_repos(add_downloads = TRUE, which = echogithub::r_repos_opts(exclude = c("GitHub","local")))
pkgs <- echogithub::r_repos_downloads(which = c("CRAN","Bioc"),
nThread = 10)
pkgs$downloads
pkgs
closeAllConnections()
pkgs <- echogithub::r_repos_downloads(which = c("CRAN","Bioc"),
nThread = 1)
pkgs$downloads
pkgs
pkgs <- echogithub::r_repos_downloads(which = c("CRAN","Bioc"))
pgks
pkgs
pkgs <- pkgs[!is.na(downloads),]
data.table::setkeyv(pkgs,c("r_repo","downloads"))
pkgs_top <- pkgs[, tail(.SD, 10), by="r_repo"]
methods::show(pkgs_top)
```
pkgs_top <- pkgs[, tail(.SD, 10), by="r_repo"]
pkgs_top
r=readRDS("reports/r_repos_res.rds")
r
r$upset
r_repos_res <- echogithub::r_repos()
? echogithub::r_repos()
r_repos_res <- echogithub::r_repos(save_path = there::here("reports","r_repos_upset.pdf"))
r_repos_res <- echogithub::r_repos(save_path = here::here("reports","r_repos_upset.pdf"))
r_repos_res <- echogithub::r_repos(save_path = here::here("reports","r_repos_upset.pdf"), width=12)
devtools::document()
library(rworkflows)
HPOExplorer::add_modifier()
?HPOExplorer::add_modifier()
d
?HPOExplorer::load_phenotype_to_genes("")
d=HPOExplorer::load_phenotype_to_genes("phenotype.hpoa")
d$DiseaseName
d$DiseaseName[1:10]
unique(d$DiseaseName[1:10]
unique(d$DiseaseName)[1:10]
template_path <- system.file("templates","docker.Rmd",
package = "rworkflows")
#### Edit the yaml header ###
l <- readLines(template_path)
yml_lines <- seq(grep("---",l)[1],
rev(grep("---",l))[1] )
yml <- yaml::read_yaml(text = l[yml_lines])
## docker_user
yml$params$docker_org$value <- docker_org
yml$vignette
l
devtools::document()
library(rworkflows)
dir.create(dirname(path), showWarnings = FALSE, recursive = TRUE)
#### get the template ####
template_path <- system.file("templates","docker.Rmd",
package = "rworkflows")
#### Edit the yaml header ###
l <- readLines(template_path)
yml_lines <- seq(grep("---",l)[1],
rev(grep("---",l))[1] )
yml <- yaml::read_yaml(text = l[yml_lines])
## docker_user
yml$params$docker_org$value <- docker_org
devoptera::args2vars(use_vignette_docker, reassign = TRUE)
#### get the template ####
template_path <- system.file("templates","docker.Rmd",
package = "rworkflows")
#### Edit the yaml header ###
l <- readLines(template_path)
yml_lines <- seq(grep("---",l)[1],
rev(grep("---",l))[1] )
yml <- yaml::read_yaml(text = l[yml_lines])
## docker_user
yml$params$docker_org$value <- docker_org
## vignette title
yml$title <- title
yml <- set_vignette_index(yml = yml,
pattern = "%\\VignetteIndexEntry{docker}",
vignette_index_entry = vignette_index_entry)
docker_org = "neurogenomicslab"
## docker_user
yml$params$docker_org$value <- docker_org
## vignette title
yml$title <- title
yml <- set_vignette_index(yml = yml,
pattern = "%\\VignetteIndexEntry{docker}",
vignette_index_entry = vignette_index_entry)
yml$output <- output
#### Change port numbers ####
l <- gsub("<port_in>",port_in,l)
l
l <- gsub("<port_out>",port_out,l)
l
?Rfast::topological_sort()
