devtools::check_man()
library(rworkflows)
library(rworkflows)
?check_miniconda_args
?use_workflow
install.packages("devtooles")
install.packages("devtools")
install.packages("devtools")
rworkflows::use_badges()
devtools::check_man()
library(rworkflows)
?check_miniconda_args
??check_miniconda_args
library(rworkflows)
?check_miniconda_args
devtools::check_man()
library(rworkflows)
devtools::check_man()
library(rworkflows)
devtools::check_man()
library(rworkflows)
devtools::check_man()
library(rworkflows)
yml <- construct_conda_yml(name="myenv",
dependencies=c("anndata","scanpy"),
return_path = FALSE,
save_path=tempfile(filext="myenv_conda.yml"))
yml <- construct_conda_yml(name="myenv",
dependencies=c("anndata","scanpy"),
return_path = FALSE,
save_path=tempfile(fileext="myenv_conda.yml"))
devtools::check_man()
devtools::check_man()
devtools::check_man()
library(rworkflows)
usethis::use_test()
#### Construct an actual conda env ####
reticulate:::conda_installed
#### Construct an actual conda env ####
reticulate::conda_binary()
utils::getFromNamespace("conda_installed","reticulate")
source("~/Desktop/rworkflows/R/conda_installed.R", echo=TRUE)
conda_installed()
yml3 <- construct_conda_yml(name="sc_env",
dependencies=c("anndata","scanpy"),
save_path = NULL,
return_path = TRUE)
yml3
yml3$channels
yml3 <- construct_conda_yml(name="sc_env",
dependencies=c("anndata","scanpy"),
save_path = NULL,
preview = TRUE,
return_path = TRUE)
?reticulate:::conda_create_env()
?reticulate::conda_create()
out <- reticulate::conda_create(environment = yml3)
yml3
path1
path1 <- construct_conda_yml(name="sc_env",
dependencies=c("anndata","scanpy"),
return_path = TRUE)
out <- reticulate::conda_create(environment = path1)
closeAllConnections()
path2 <- construct_conda_yml(name="testenv",
dependencies=c("python>3.7"),
pip="pip",
return_path = TRUE)
out <- reticulate::conda_create(environment = path2)
path2 <- construct_conda_yml(name="testenv",
dependencies=c("python>3.7"),
pip="pip",
preview = TRUE,
return_path = TRUE)
path2 <- construct_conda_yml(name="testenv",
dependencies=c("python>3.7"),
pip=list("pip"),
preview = TRUE,
return_path = TRUE)
out <- reticulate::conda_create(environment = path2)
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python>3.7"),
pip=list("pip"),
preview = TRUE,
return_path = TRUE)
out <- reticulate::conda_create(environment = path2)
library(rworkflows)
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python>3.7"),
pip=list("pip"),
preview = TRUE,
return_path = TRUE)
library(rworkflows)
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python>3.7"),
pip=list("pip"),
preview = TRUE,
return_path = TRUE)
devoptera::args2vars(construct_conda_yml)
name="testenv"
dependencies=list("python>3.7")
pip=list("pip")
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
yml
yml["dependencies"][["pip"]]
yml["dependencies"]
yml["dependencies"][["pip"]] <- pip
yml
yml[["dependencies"]][["pip"]]
yml[["dependencies"]][["pip"]] <- pip
yml
preview_yaml(yml=yml)
pip
pip
pip="pip"
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
yml[["dependencies"]][["pip"]] <- pip
preview_yaml(yml=yml)
file.edit("../echoverse/echoconda/inst/conda/cellblast.yml")
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
# devoptera::args2vars(construct_conda_yml)
if(!is.null(pip)) dependencies <- unique(c(dependencies,"pip"))
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
yml[["dependencies"]][["pip"]]
pip
yml[["dependencies"]][["pip"]] <- pip
yml
preview_yaml(yml=yml)
pip=list("requests")
dependencies=list("python>3.7")
# devoptera::args2vars(construct_conda_yml) pip
if(!is.null(pip)) dependencies <- unique(c(dependencies,"pip"))
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
dependencies
p
yml[["dependencies"]][["pip"]] <- pip
yml
preview_yaml(yml=yml)
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
yml[["dependencies"]][["- pip"]] <- pip
yml
preview_yaml(yml=yml)
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
yml[["dependencies"]]$pip <- pip
#### Preview ####
if(isTRUE(preview)){
preview_yaml(yml=yml)
}
preview_yaml(yml=yml)
#### Save yaml ####
path_or_yaml <- return_yaml(yml=yml,
path=save_path,
return_path=return_path,
verbose=verbose)
yml[["dependencies"]]
names(yml[["dependencies"]])
names(yml[["dependencies"]])[1]=NULL
names(yml[["dependencies"]])[1]
names(yml[["dependencies"]])[1] <- NULL
names(yml[["dependencies"]]) <- NULL
yml
preview_yaml(yml=yml)
dependencies
dependencies=list("python>3.7")
pip=list("requests")
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
dependencies
yml[["dependencies"]]
yml[["dependencies"]]
c(yml[["dependencies"]],"pip")
unique(c(yml[["dependencies"]],"pip"))
unique(c(yml[["dependencies"]],yml[["dependencies"]][[1]],"pip"))
c(yml[["dependencies"]],yml[["dependencies"]][[1]],"pip")
yml[["dependencies"]]
yml[["dependencies"]] <- unique(c(yml[["dependencies"]],"pip"))
yml$dependencies
unlist(yml$dependencies)=="pip"
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
yml[["dependencies"]] <- unique(c(yml[["dependencies"]],
list("pip"=pip)))
yml
preview_yaml(yml=yml)
yml[["dependencies"]] <- unique(c(yml[["dependencies"]],
pip=list(pip)))
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
yml[["dependencies"]] <- unique(c(yml[["dependencies"]],
pip=list(pip)))
preview_yaml(yml=yml)
unique(c(yml[["dependencies"]],
pip=list(pip)))
c(yml[["dependencies"]],
pip=list(pip))
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
yml[["dependencies"]] <- c(yml[["dependencies"]],
pip=list(pip))
preview_yaml(yml=yml)
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
yml[["dependencies"]] <- c(yml[["dependencies"]],
list(pip=pip))
preview_yaml(yml=yml)
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
yml[["dependencies"]] <- c(yml[["dependencies"]],
list(list(pip=pip)))
preview_yaml(yml=yml)
devtools::document()
library(rworkflows)
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python>3.7"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE)
out <- reticulate::conda_create(environment = path2)
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python>3.7"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE)
dependencies
library(rworkflows)
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python>3.7"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE)
out <- reticulate::conda_create(environment = path2)
reticulate::conda_remove("testenv")
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE)
out <- reticulate::conda_create(environment = path2)
path2
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE)
file.edit(path2)
?yaml::as.yaml
devtools::document()
devtools::check_man()
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE)
file.edit(path2)
pip
devoptera::args2vars(construct_conda_yml)
name="testenv"
dependencies=list("python")
pip=list("requests")
if(is.vector(dependencies)) dependencies <- as.list(dependencies)
dependencies
dependencies
if(is.vector(pip)) pip <- as.list(pip)
pip
is.vector(pip)
if(is.vector(pip)) pip <- as.list(pip)
pip
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
if(!is.null(pip)){
yml[["dependencies"]] <- c(unique(c(yml[["dependencies"]],"pip")),
list(list(pip=pip)))
}
#### Preview ####
if(isTRUE(preview)){
preview_yaml(yml=yml)
}
preview_yaml(yml=yml)
#### Save yaml ####
path_or_yaml <- return_yaml(yml=yml,
path=save_path,
return_path=return_path,
verbose=verbose,
indent.mapping.sequence = TRUE)
?yaml::yaml.load
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml),
handlers = handlers2)
yml2
preview_yaml(yml)
path
path=tempfile(fileext = ".yml")
yaml::write_yaml(x = yml2,
file = path)
file.edit(path)
yml2
?yaml::write_yaml
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = TRUE)
yaml::write_yaml(x = yml2,
file = path,
omap=T,
indent.mapping.sequence = TRUE)
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = TRUE)
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = F)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"},
'list' = function(x){as.list(x)})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml),
handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = F)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"},
'string' = function(x){as.list(x)})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml),
handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = F)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"},
'character' = function(x){as.list(x)})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml),
handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = F)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"},
'vector' = function(x){as.list(x)})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml),
handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = F)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"},
'vector' = function(x){list(x)})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml),
handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = F)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"},
'list' = function(x){list(x)})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml),
handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = F)
devoptera::args2vars(construct_conda_yml)
source("~/Desktop/rworkflows/R/construct_conda_yml.R", echo=TRUE)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml),
handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = F)
dependencies=list("python")
pip=list("requests")
if(is.vector(dependencies)) dependencies <- as.list(dependencies)
if(is.vector(pip)) pip <- as.list(pip)
yml <- list(
name=name,
channels=channels,
dependencies=dependencies
)
if(!is.null(pip)){
yml[["dependencies"]] <- c(unique(c(yml[["dependencies"]],"pip")),
list(list(pip=list(pip))))
}
preview_yaml(yml=yml)
#### Write bools as true/false rather than yes/no (default) ####
handlers2 <- list('bool#yes' = function(x){"${{ true }}"},
'bool#no' = function(x){"${{ false }}"})
yml2 <- yaml::yaml.load(yaml::as.yaml(yml),
handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = F)
yml
preview_yaml(yml=yml)
yaml::as.yaml(yml)
yml2 <- yaml::yaml.load(yaml::as.yaml(yml, indent.mapping.sequence = t),
handlers = handlers2)
yml2 <- yaml::yaml.load(yaml::as.yaml(yml, indent.mapping.sequence = T),
handlers = handlers2)
yaml::write_yaml(x = yml2,
file = path,
indent.mapping.sequence = F)
preview_yaml(yml2)
yaml::write_yaml(x = yml,
file = path)
devtools::check_man()
library(rworkflows)
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE)
file.edit(path2)
library(rworkflows)
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE)
out <- reticulate::conda_create(environment = path2)
open(path2)
file.edit(path2)
path2 <- construct_conda_yml(name="testenv",
dependencies=list("python"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE)
out <- reticulate::conda_create(environment = path2)
reticulate::virtualenv_exists("testenv")
reticulate:::condaenv_exists("testenv")
source("~/Desktop/rworkflows/R/condaenv_exists.R", echo=TRUE)
reticulate::conda_remove(envname = envname)
envname <- "testenv"
if(condaenv_exists(envname)){
reticulate::conda_remove(envname = envname)
}
path2 <- construct_conda_yml(name=envname = envname,
path2 <- construct_conda_yml(name=envname,
dependencies=list("python"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE)
out <- reticulate::conda_create(environment = path2)
path2 <- construct_conda_yml(name=envname,
dependencies=list("python"),
pip=list("requests"),
preview = TRUE,
return_path = TRUE)
out <- reticulate::conda_create(environment = path2)
if(condaenv_exists(envname)){
reticulate::conda_remove(envname = envname)
}
